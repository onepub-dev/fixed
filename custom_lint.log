The request analysis.setContextRoots failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setContextRoots failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setPriorityFiles failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.setSubscriptions failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request edit.getFixes failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request edit.getAssists failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
Failed to read pubspec.yaml at /home/bsutton/git/fixed:
Instance of '_WrappedYamlException'
#0      checkedYamlDecode (package:checked_yaml/checked_yaml.dart:32)
#1      new Pubspec.parse (package:pubspec_parse/src/pubspec.dart:185)
#2      parsePubspec (package:custom_lint_core/src/package_utils.dart:89)
<asynchronous suspension>
#3      CustomLintProject.parse (package:custom_lint/src/workspace.dart:920)
<asynchronous suspension>
#4      Future.wait.<anonymous closure> (dart:async/future.dart:525)
<asynchronous suspension>
#5      CustomLintWorkspace.fromContextRoots (package:custom_lint/src/workspace.dart:515)
<asynchronous suspension>
#6      SocketCustomLintServerToClientChannel.create (package:custom_lint/src/v2/server_to_client_channel.dart:54)
<asynchronous suspension>
#7      CustomLintServer._maybeSpawnCustomLintPlugin (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:362)
<asynchronous suspension>
#8      CustomLintServer._handleAnalysisSetContextRoots.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:343)
<asynchronous suspension>
#9      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#10     CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

at:
#0      CustomLintProject.parse.<anonymous closure> (package:custom_lint/src/workspace.dart:923)
#1      _rootRunBinary (dart:async/zone.dart:1560)
#2      _CustomZone.runBinary (dart:async/zone.dart:1436)
#3      _FutureListener.handleError (dart:async/future_impl.dart:237)
#4      Future._propagateToListeners.handleError (dart:async/future_impl.dart:960)
#5      Future._propagateToListeners (dart:async/future_impl.dart:981)
#6      Future._completeErrorObject (dart:async/future_impl.dart:738)
#7      Future._completeError (dart:async/future_impl.dart:742)
<asynchronous suspension>

[ReorderMembersFix] 2025-10-04T09:05:47.322950 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/fixed/lib/src/fixed.dart:
[ReorderMembersFix] 2025-10-04T09:05:47.322950 ConflictingEditException: {"offset":23097,"length":57,"replacement":"  Fixed one;\n\n  Fixed two;\n\n  _Scaled2(this.one, this.two);"} conflicts with {"offset":23097,"length":57,"replacement":"  Fixed one;\n\n  Fixed two;\n\n  _Scaled2(this.one, this.two);"}
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-04T09:05:47.322950 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-04T09:05:47.322950
[ReorderMembersFix] 2025-10-04T09:05:47.325839 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/fixed/lib/src/fixed.dart:
[ReorderMembersFix] 2025-10-04T09:05:47.325839 ConflictingEditException: {"offset":938,"length":22138,"replacement":"  static const int maxInt = platform_consts.maxInt;\n\n  static const int minInt = platform_consts.minInt;\n\n  // The value zero with [decimalDigits] = 0\n  static final zero = Fixed.fromNum(0, decimalDigits: 0);\n\n  /// The value 1 with [decimalDigits] =0\n  static final one = Fixed.fromNum(1, decimalDigits: 0);\n\n  /// The value 2 with [decimalDigits] = 0\n  static final two = Fixed.fromNum(2, decimalDigits: 0);\n\n  /// The value 10 with [decimalDigits] = 0\n  static final ten = Fixed.fromNum(10, decimalDigits: 0);\n\n  /// The value of this [Fixed] instance stored as minorUnits in a [BigInt].\n  /// If the decimalDigits is 2 then 1 is stored as 100\n  /// If the decimalDigits is 3 then 1 is stored as 1000.\n  late final BigInt minorUnits;\n\n  /// Returns this as minor units.\n  ///\n  /// e.g.\n  /// ```dart\n  /// Fixed.fromNum(1.234, decimalDigits: 3).minorUnits = 1234\n  ///\n  /// late final BigInt minorUnits =\n  ///    (value * Decimal.ten.pow(decimalDigits)).toBigInt();\n  /// ```\n  ///\n  /// The decimalDigits with which we store the amount.\n  ///\n  /// A decimalDigits of 2 means we store the value to\n  /// two decimal places.\n  final int decimalDigits;\n\n  /// Parses [amount] as a decimal value.\n  ///\n  /// The [decimalDigits] controls the number of decimal\n  /// places to be retained.\n  /// If [decimalDigits] is not passed then the decimalDigits is determined\n  /// by the number of decimal places present in the passed [amount].\n  ///\n  /// If [decimalDigits] < 0 then a FixedException will be thrown.\n  /// If the [amount] isn't valid then\n  /// a [FixedParseException] is thrown.\n  ///\n  /// If [invertSeparator] = false then we\n  /// assume '.' is the decimal place and ',' is the group separator.\n  ///\n  /// If [invertSeparator] = true then we\n  /// assume ',' is the decimal place and '.' is the group separator.\n  factory Fixed.parse(\n    String amount, {\n    int? decimalDigits,\n    bool invertSeparator = false,\n  }) {\n    if (decimalDigits != null) {\n      _checkDecimalDigits(decimalDigits);\n    }\n\n    final decimalSeparator = invertSeparator ? ',' : '.';\n\n    final decoder = FixedDecoder(\n      // TODO(bsutton): remove the pattern from the decoder\n      // as I don't think we actually need one.\n      // We just need to know what char is the decimal place.\n      pattern: '#$decimalSeparator#',\n      groupSeparator: invertSeparator ? '.' : ',',\n      decimalSeparator: invertSeparator ? ',' : '.',\n    );\n    final minorUnitsAndScale = decoder.decode(amount, decimalDigits);\n    final targetDecimalDigits =\n        decimalDigits ?? minorUnitsAndScale.decimalDigits;\n    return Fixed.fromBigInt(\n        _rescale(minorUnitsAndScale.value,\n            existingDecimalDigits: minorUnitsAndScale.decimalDigits,\n            targetDecimalDigits: targetDecimalDigits),\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Creates a Fixed value from a double\n  /// or integer value and stores the value with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  ///\n  /// This method will throw [AmountTooLargeException]\n  /// if the [decimalDigits] is > 20 or the absolute value\n  /// is greater than 10^21\n  ///\n  /// If you need larger numbers then use one of the alternate\n  /// constructors.\n  Fixed.fromNum(num amount, {this.decimalDigits = 16}) {\n    ///\n    /// ```dart\n    /// final value = Fixed.fromNum(1.2345, decimalDigits: 2);\n    /// print(value) -> 1.23\n    /// ```\n    ///\n    _checkDecimalDigits(decimalDigits);\n\n    if (decimalDigits > 20) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n\n    final decoder = FixedDecoder(\n      pattern: '#.#',\n      groupSeparator: ',',\n      decimalSeparator: '.',\n    );\n\n    /// toStringAsFixed is limited to a max of 20 decimal places\n    try {\n      final fixed = amount.toStringAsFixed(decimalDigits);\n      if (fixed.contains('e')) {\n        throw AmountTooLargeException('The amount must be less than 10^20');\n      }\n      final decimalAndScale = decoder.decode(fixed, decimalDigits);\n      minorUnits = decimalAndScale.value;\n      // We catch the error so we can provide a more meaningful message.\n      // ignore: avoid_catching_errors\n    } on RangeError catch (_) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n  }\n\n  /// Creates Fixed instance from [minorUnits] with the given\n  /// [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  ///\n  /// e.g.\n  /// ```dart\n  /// final fixed = Fixed.fromInt(100, decimalDigits: 2)\n  /// print(fixed) : 1.00\n  /// ```\n  Fixed.fromInt(int minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n    this.minorUnits = BigInt.from(minorUnits);\n  }\n\n  /// Creates a Fixed instance from [amount] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  Fixed.fromDecimal(Decimal amount, {this.decimalDigits = 16}) {\n    _checkDecimalDigits(decimalDigits);\n    minorUnits = _rescale(\n      (amount * Decimal.ten.pow(amount.scale).toDecimal()).toBigInt(),\n      existingDecimalDigits: amount.scale,\n      targetDecimalDigits: decimalDigits,\n    );\n  }\n\n  /// Creates a Fixed instance from [minorUnits] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  Fixed.fromBigInt(this.minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the decimalDigits to [decimalDigits].\n  @Deprecated('Use the copyWith member method')\n  factory Fixed.copyWith(Fixed fixed, {int? decimalDigits}) {\n    decimalDigits ??= fixed.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(fixed.minorUnits,\n            existingDecimalDigits: fixed.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the scale to [decimalDigits].\n  Fixed copyWith({int? decimalDigits}) {\n    decimalDigits ??= this.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(minorUnits,\n            existingDecimalDigits: this.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns the absolute value of this.\n  Fixed get abs => isNegative ? -this : this;\n\n  /// The component of the number after the decimal point.\n  ///\n  /// The returned value will always be a +ve no.\n  /// The [integerPart] will contain the sign.\n  BigInt get decimalPart => (minorUnits - integerPart * scaleFactor).abs();\n\n  String decimalPartAsString() {\n    var whole = minorUnits.toString();\n\n    /// we will add the -ve when we know where it is to be placed.\n    if (whole.startsWith('-')) {\n      whole = whole.substring(1);\n    }\n\n    if (whole.length < decimalDigits) {\n      whole = whole.padLeft(decimalDigits, '0');\n    }\n\n    final decimalStart = whole.length - decimalDigits;\n    final decimalPart = whole.substring(decimalStart);\n\n    return decimalPart;\n  }\n\n  @override\n  int get hashCode => minorUnits.hashCode + decimalDigits.hashCode;\n\n  /// The component of the number before the decimal point\n  BigInt get integerPart => minorUnits ~/ BigInt.from(10).pow(decimalDigits);\n\n  /// returns true of the value of this is negative.\n  bool get isNegative => minorUnits < BigInt.zero;\n\n  /// returns true if the value of this is positive.\n  bool get isPositive => minorUnits > BigInt.zero;\n\n  /// returns true if the value of this is zero.\n  bool get isZero => minorUnits == BigInt.zero;\n\n  /// Returns 10 ^ [decimalDigits]\n  BigInt get scaleFactor => BigInt.from(10).pow(decimalDigits);\n\n  /// Returns the sign of this amount.\n  ///\n  /// Returns 0 for zero, -1 for values less than zero and +1 for\n  ///  values greater than zero.\n  int get sign => minorUnits.isNegative\n      ? -1\n      : minorUnits == BigInt.zero\n          ? 0\n          : 1;\n\n  /// Returns this % [denominator].\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator %(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator % scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this * [multiplier].\n  ///\n  /// The result's [decimalDigits] is the sum of the [decimalDigits] of the two\n  /// operands.\n  Fixed operator *(Fixed multiplier) {\n    final targetDecimalDigits = decimalDigits + multiplier.decimalDigits;\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledMultiplier = _rescale(multiplier.minorUnits,\n        existingDecimalDigits: multiplier.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final rawResult = scaledThis * scaledMultiplier;\n\n    final scaledResult = _rescale(rawResult,\n        existingDecimalDigits: targetDecimalDigits * 2,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this + [addition]\n  ///\n  /// The resulting [decimalDigits] is the larger decimalDigits of\n  /// the two operands.\n  Fixed operator +(Fixed addition) {\n    final targetDecimalDigits = max(decimalDigits, addition.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledAddition = _rescale(addition.minorUnits,\n        existingDecimalDigits: addition.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis + scaledAddition,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns -this.\n  ///\n  /// The resulting [decimalDigits] is the [decimalDigits] of this.\n  Fixed operator -() =>\n      Fixed.fromBigInt(-minorUnits, decimalDigits: decimalDigits);\n\n  /// Returns this - [subtration]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator -(Fixed subtration) {\n    final targetDecimalDigits = max(decimalDigits, subtration.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledSubtraction = _rescale(subtration.minorUnits,\n        existingDecimalDigits: subtration.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis - scaledSubtraction,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this / [denominator]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator /(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final numResult = numerator / scaledDenominator;\n\n    return Fixed.fromNum(numResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns  this / [divisor].\n  ///\n  /// The decimalDigits is left unchanged.\n  Fixed divide(num divisor) => this * Fixed.fromNum(1.0 / divisor.toDouble());\n\n  /// Returns the this ~/ [denominator]\n  ///\n  /// This is a truncating division operator.\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator ~/(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator ~/ scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// less than operator\n  bool operator <(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits < scaled.two.minorUnits;\n  }\n\n  /// less than or equal operator\n  bool operator <=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits <= scaled.two.minorUnits;\n  }\n\n  /// Two Fixed values are considered equal if they have\n  /// the same value irrespective of decimalDigits.\n  @override\n  bool operator ==(Object other) {\n    if (other is! Fixed) {\n      return false;\n    }\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits == scaled.two.minorUnits;\n  }\n\n  /// greater than operator\n  bool operator >(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits > scaled.two.minorUnits;\n  }\n\n  /// greater than or equal operator\n  bool operator >=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits >= scaled.two.minorUnits;\n  }\n\n  ///  Spread the value across 'n' Fixed values according\n  /// to the supplie [ratios].\n  ///\n  /// 'n' is controlled by the number\n  /// of [ratios] passed.\n  List<Fixed> allocationAccordingTo(List<int> ratios) {\n    if (ratios.isEmpty) {\n      throw ArgumentError.value(ratios, 'ratios',\n          'List of ratios must not be empty, cannot allocate to nothing.');\n    }\n\n    return _doAllocationAccordingTo(ratios.map((ratio) {\n      if (ratio < 0) {\n        throw ArgumentError.value(\n            ratios, 'ratios', 'Ratio must not be negative.');\n      }\n\n      return BigInt.from(ratio);\n    }).toList());\n  }\n\n  /// Two [Fixed] instances are the same if they have\n  /// the same [minorUnits] and the same [decimalDigits].\n  @override\n  int compareTo(Fixed other) {\n    if (minorUnits == other.minorUnits) {\n      return decimalDigits.compareTo(other.decimalDigits);\n    } else {\n      return minorUnits.compareTo(other.minorUnits);\n    }\n  }\n\n  /// Formats a [Fixed] value into a String according to the\n  /// passed [pattern].\n  ///\n  /// If [invertSeparator] is true then the role of the '.' and ',' are\n  /// reversed. By default the '.' is used as the decimal separator\n  /// whilst the ',' is used as the grouping separator.\n  ///\n  /// 0 A single digit\n  /// # A single digit, omitted if the value is zero\n  /// . or , Decimal separator dependant on [invertSeparator]\n  /// - Minus sign\n  /// , or . Grouping separator dependant on [invertSeparator]\n  /// space Space character.\n  ///\n  String format(String pattern, {bool invertSeparator = false}) {\n    if (!invertSeparator) {\n      return FixedEncoder(pattern).encode(this);\n    } else {\n      return FixedEncoder(pattern, decimalSeparator: ',', groupSeparator: '.')\n          .encode(this);\n    }\n  }\n\n  /// Formats the value using the [locale]'s decimal pattern.\n  ///\n  /// If you don't provide a [locale] then we use the systems\n  /// default locale.\n  String formatIntl([String? locale]) {\n    locale ??= Intl.defaultLocale;\n\n    final formatter = NumberFormat.decimalPattern(locale);\n    return DecimalFormatter(formatter).format(toDecimal());\n  }\n\n  /// Returns this * [multiplier]\n  ///\n  /// if you pass [decimalDigits] then it will be used\n  /// to determine the number of decimals to retain from [multiplier].\n  /// If you don't pass [decimalDigits] then this.decimalDigits\n  /// will be used.\n  ///\n  /// The result's [decimalDigits] == [decimalDigits] * 2.\n  Fixed multiply(num multiplier, {int? decimalDigits}) =>\n      this *\n      Fixed.fromNum(multiplier,\n          decimalDigits: decimalDigits ?? this.decimalDigits);\n\n  /// Returns this ^ [exponent]\n  ///\n  /// The returned value has the same [decimalDigits] as this.\n  Fixed pow(int exponent) =>\n      Fixed.fromBigInt(minorUnits.pow(exponent), decimalDigits: decimalDigits);\n\n  /// Returns the remainder of dividing this / [divisor].\n  ///\n  /// The [decimalDigits] is largest of the two decimalDigits\n  /// + the decimalDigits of the [divisor].\n  Fixed remainder(Fixed divisor) => this - (this ~/ divisor) * divisor;\n\n  /// Returns the value as a [Decimal]\n  Decimal toDecimal() => Decimal.parse(toString());\n\n  /// Truncates this and returns the integer part.\n  int toInt() => minorUnits == BigInt.zero\n      ? 0\n      : (minorUnits ~/ BigInt.from(10).pow(decimalDigits)).toInt();\n\n  /// Returns the [Fixed] value using [decimalDigits] to control the\n  /// displayed number of decimal places.\n  ///\n  /// ```dart\n  /// Fixed.fromInt(1000, decimalDigits: 3).toString() == '1.000'\n  /// ```\n  ///\n  /// If you need to modify the separators or\n  /// control the returned decimalDigits use [format].\n  @override\n  String toString() {\n    final String pattern;\n    if (decimalDigits == 0) {\n      pattern = '#';\n    } else {\n      pattern = '0.${'#' * decimalDigits}';\n    }\n    final encoder = FixedEncoder(pattern);\n\n    return encoder.encode(this);\n  }\n\n  List<Fixed> _doAllocationAccordingTo(List<BigInt> ratios) {\n    final totalVolume = ratios.reduce((a, b) => a + b);\n\n    if (totalVolume == BigInt.zero) {\n      throw ArgumentError('Sum of ratios must be greater than zero, '\n          'cannot allocate to nothing.');\n    }\n\n    final absoluteValue = minorUnits.abs();\n    var remainder = absoluteValue;\n\n    final shares = ratios.map((ratio) {\n      final share = absoluteValue * ratio ~/ totalVolume;\n      remainder -= share;\n\n      return share;\n    }).toList();\n\n    for (var i = 0; remainder > BigInt.zero && i < shares.length; ++i) {\n      if (ratios[i] > BigInt.zero) {\n        shares[i] += BigInt.one;\n        remainder -= BigInt.one;\n      }\n    }\n\n    return shares\n        .map((share) => Fixed.fromBigInt(minorUnits.isNegative ? -share : share,\n            decimalDigits: decimalDigits))\n        .toList();\n  }\n\n  /// Works the same as [Fixed.parse] but returns a null\n  /// if the [amount] cannot be parsed.\n  ///\n  /// Sets the [decimalDigits] of the returned number to [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  static Fixed? tryParse(\n    String amount, {\n    int decimalDigits = 2,\n    bool invertSeparator = false,\n  }) {\n    try {\n      return Fixed.parse(amount,\n          //pattern: pattern,\n          decimalDigits: decimalDigits,\n          invertSeparator: invertSeparator);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  static void _checkDecimalDigits(int decimalDigits) {\n    if (decimalDigits < 0) {\n      throw FixedException(\n          'A negative decimalDigits of $decimalDigits was passed. '\n          'The decimalDigits must be >= 0.');\n    }\n  }\n\n  static BigInt _rescale(\n    BigInt minorUnits, {\n    required int existingDecimalDigits,\n    required int targetDecimalDigits,\n  }) {\n    if (existingDecimalDigits < targetDecimalDigits) {\n      // Increase decimalDigits:\n      //  just multiply by 10^(targetDecimalDigits - existingDecimalDigits)\n      final diff = targetDecimalDigits - existingDecimalDigits;\n      return minorUnits * BigInt.from(10).pow(diff);\n    } else if (existingDecimalDigits > targetDecimalDigits) {\n      // Reduce decimalDigits with round-half-away-from-zero\n      final diff = existingDecimalDigits - targetDecimalDigits;\n      return _roundHalfAwayFromZero(minorUnits, diff);\n    } else {\n      // No change\n      return minorUnits;\n    }\n  }\n\n  /// Divides [value] by 10^[decimalDigitsDiff], then rounds half\n  ///   away from zero.\n  /// Example: If [value] = 15241578750190521000000, decimalDigitsDiff = 6,\n  ///   we want to do integer division plus correct\n  ///   rounding—without floating-point.\n  static BigInt _roundHalfAwayFromZero(BigInt value, int decimalDigitsDiff) {\n    final divisor = BigInt.from(10).pow(decimalDigitsDiff);\n    if (divisor == BigInt.one) {\n      // Nothing to scale\n      return value;\n    }\n\n    // Determine sign; work with absolute\n    final isNegative = value.isNegative;\n    final absValue = isNegative ? -value : value;\n\n    // Integer division and remainder\n    final absQuotient = absValue ~/ divisor;\n    final absRemainder = absValue % divisor; // remainder in [0 .. divisor-1]\n\n    // Compare remainder to half of divisor\n    // If remainder * 2 == divisor => exactly half => also round up\n    final twiceRemainder = absRemainder << 1; // same as absRemainder * 2\n\n    if (twiceRemainder > divisor) {\n      // remainder > 0.5 => round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    } else if (twiceRemainder < divisor) {\n      // remainder < 0.5 => round down\n      return isNegative ? -absQuotient : absQuotient;\n    } else {\n      // remainder == exactly 0.5 => round half AWAY from zero => also round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    }\n  }\n\n  _Scaled2 _scale(Fixed fixed, Fixed other) {\n    if (fixed.decimalDigits > other.decimalDigits) {\n      return _Scaled2(\n          fixed,\n          Fixed.fromBigInt(\n              _rescale(other.minorUnits,\n                  existingDecimalDigits: other.decimalDigits,\n                  targetDecimalDigits: fixed.decimalDigits),\n              decimalDigits: fixed.decimalDigits));\n    }\n    if (fixed.decimalDigits < other.decimalDigits) {\n      return _Scaled2(\n          Fixed.fromBigInt(\n              _rescale(fixed.minorUnits,\n                  existingDecimalDigits: fixed.decimalDigits,\n                  targetDecimalDigits: other.decimalDigits),\n              decimalDigits: other.decimalDigits),\n          other);\n    }\n    return _Scaled2(fixed, other);\n  }"} conflicts with {"offset":938,"length":22138,"replacement":"  static const int maxInt = platform_consts.maxInt;\n\n  static const int minInt = platform_consts.minInt;\n\n  // The value zero with [decimalDigits] = 0\n  static final zero = Fixed.fromNum(0, decimalDigits: 0);\n\n  /// The value 1 with [decimalDigits] =0\n  static final one = Fixed.fromNum(1, decimalDigits: 0);\n\n  /// The value 2 with [decimalDigits] = 0\n  static final two = Fixed.fromNum(2, decimalDigits: 0);\n\n  /// The value 10 with [decimalDigits] = 0\n  static final ten = Fixed.fromNum(10, decimalDigits: 0);\n\n  /// The value of this [Fixed] instance stored as minorUnits in a [BigInt].\n  /// If the decimalDigits is 2 then 1 is stored as 100\n  /// If the decimalDigits is 3 then 1 is stored as 1000.\n  late final BigInt minorUnits;\n\n  /// Returns this as minor units.\n  ///\n  /// e.g.\n  /// ```dart\n  /// Fixed.fromNum(1.234, decimalDigits: 3).minorUnits = 1234\n  ///\n  /// late final BigInt minorUnits =\n  ///    (value * Decimal.ten.pow(decimalDigits)).toBigInt();\n  /// ```\n  ///\n  /// The decimalDigits with which we store the amount.\n  ///\n  /// A decimalDigits of 2 means we store the value to\n  /// two decimal places.\n  final int decimalDigits;\n\n  /// Parses [amount] as a decimal value.\n  ///\n  /// The [decimalDigits] controls the number of decimal\n  /// places to be retained.\n  /// If [decimalDigits] is not passed then the decimalDigits is determined\n  /// by the number of decimal places present in the passed [amount].\n  ///\n  /// If [decimalDigits] < 0 then a FixedException will be thrown.\n  /// If the [amount] isn't valid then\n  /// a [FixedParseException] is thrown.\n  ///\n  /// If [invertSeparator] = false then we\n  /// assume '.' is the decimal place and ',' is the group separator.\n  ///\n  /// If [invertSeparator] = true then we\n  /// assume ',' is the decimal place and '.' is the group separator.\n  factory Fixed.parse(\n    String amount, {\n    int? decimalDigits,\n    bool invertSeparator = false,\n  }) {\n    if (decimalDigits != null) {\n      _checkDecimalDigits(decimalDigits);\n    }\n\n    final decimalSeparator = invertSeparator ? ',' : '.';\n\n    final decoder = FixedDecoder(\n      // TODO(bsutton): remove the pattern from the decoder\n      // as I don't think we actually need one.\n      // We just need to know what char is the decimal place.\n      pattern: '#$decimalSeparator#',\n      groupSeparator: invertSeparator ? '.' : ',',\n      decimalSeparator: invertSeparator ? ',' : '.',\n    );\n    final minorUnitsAndScale = decoder.decode(amount, decimalDigits);\n    final targetDecimalDigits =\n        decimalDigits ?? minorUnitsAndScale.decimalDigits;\n    return Fixed.fromBigInt(\n        _rescale(minorUnitsAndScale.value,\n            existingDecimalDigits: minorUnitsAndScale.decimalDigits,\n            targetDecimalDigits: targetDecimalDigits),\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Creates a Fixed value from a double\n  /// or integer value and stores the value with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  ///\n  /// This method will throw [AmountTooLargeException]\n  /// if the [decimalDigits] is > 20 or the absolute value\n  /// is greater than 10^21\n  ///\n  /// If you need larger numbers then use one of the alternate\n  /// constructors.\n  Fixed.fromNum(num amount, {this.decimalDigits = 16}) {\n    ///\n    /// ```dart\n    /// final value = Fixed.fromNum(1.2345, decimalDigits: 2);\n    /// print(value) -> 1.23\n    /// ```\n    ///\n    _checkDecimalDigits(decimalDigits);\n\n    if (decimalDigits > 20) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n\n    final decoder = FixedDecoder(\n      pattern: '#.#',\n      groupSeparator: ',',\n      decimalSeparator: '.',\n    );\n\n    /// toStringAsFixed is limited to a max of 20 decimal places\n    try {\n      final fixed = amount.toStringAsFixed(decimalDigits);\n      if (fixed.contains('e')) {\n        throw AmountTooLargeException('The amount must be less than 10^20');\n      }\n      final decimalAndScale = decoder.decode(fixed, decimalDigits);\n      minorUnits = decimalAndScale.value;\n      // We catch the error so we can provide a more meaningful message.\n      // ignore: avoid_catching_errors\n    } on RangeError catch (_) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n  }\n\n  /// Creates Fixed instance from [minorUnits] with the given\n  /// [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  ///\n  /// e.g.\n  /// ```dart\n  /// final fixed = Fixed.fromInt(100, decimalDigits: 2)\n  /// print(fixed) : 1.00\n  /// ```\n  Fixed.fromInt(int minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n    this.minorUnits = BigInt.from(minorUnits);\n  }\n\n  /// Creates a Fixed instance from [amount] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  Fixed.fromDecimal(Decimal amount, {this.decimalDigits = 16}) {\n    _checkDecimalDigits(decimalDigits);\n    minorUnits = _rescale(\n      (amount * Decimal.ten.pow(amount.scale).toDecimal()).toBigInt(),\n      existingDecimalDigits: amount.scale,\n      targetDecimalDigits: decimalDigits,\n    );\n  }\n\n  /// Creates a Fixed instance from [minorUnits] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  Fixed.fromBigInt(this.minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the decimalDigits to [decimalDigits].\n  @Deprecated('Use the copyWith member method')\n  factory Fixed.copyWith(Fixed fixed, {int? decimalDigits}) {\n    decimalDigits ??= fixed.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(fixed.minorUnits,\n            existingDecimalDigits: fixed.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the scale to [decimalDigits].\n  Fixed copyWith({int? decimalDigits}) {\n    decimalDigits ??= this.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(minorUnits,\n            existingDecimalDigits: this.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns the absolute value of this.\n  Fixed get abs => isNegative ? -this : this;\n\n  /// The component of the number after the decimal point.\n  ///\n  /// The returned value will always be a +ve no.\n  /// The [integerPart] will contain the sign.\n  BigInt get decimalPart => (minorUnits - integerPart * scaleFactor).abs();\n\n  String decimalPartAsString() {\n    var whole = minorUnits.toString();\n\n    /// we will add the -ve when we know where it is to be placed.\n    if (whole.startsWith('-')) {\n      whole = whole.substring(1);\n    }\n\n    if (whole.length < decimalDigits) {\n      whole = whole.padLeft(decimalDigits, '0');\n    }\n\n    final decimalStart = whole.length - decimalDigits;\n    final decimalPart = whole.substring(decimalStart);\n\n    return decimalPart;\n  }\n\n  @override\n  int get hashCode => minorUnits.hashCode + decimalDigits.hashCode;\n\n  /// The component of the number before the decimal point\n  BigInt get integerPart => minorUnits ~/ BigInt.from(10).pow(decimalDigits);\n\n  /// returns true of the value of this is negative.\n  bool get isNegative => minorUnits < BigInt.zero;\n\n  /// returns true if the value of this is positive.\n  bool get isPositive => minorUnits > BigInt.zero;\n\n  /// returns true if the value of this is zero.\n  bool get isZero => minorUnits == BigInt.zero;\n\n  /// Returns 10 ^ [decimalDigits]\n  BigInt get scaleFactor => BigInt.from(10).pow(decimalDigits);\n\n  /// Returns the sign of this amount.\n  ///\n  /// Returns 0 for zero, -1 for values less than zero and +1 for\n  ///  values greater than zero.\n  int get sign => minorUnits.isNegative\n      ? -1\n      : minorUnits == BigInt.zero\n          ? 0\n          : 1;\n\n  /// Returns this % [denominator].\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator %(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator % scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this * [multiplier].\n  ///\n  /// The result's [decimalDigits] is the sum of the [decimalDigits] of the two\n  /// operands.\n  Fixed operator *(Fixed multiplier) {\n    final targetDecimalDigits = decimalDigits + multiplier.decimalDigits;\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledMultiplier = _rescale(multiplier.minorUnits,\n        existingDecimalDigits: multiplier.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final rawResult = scaledThis * scaledMultiplier;\n\n    final scaledResult = _rescale(rawResult,\n        existingDecimalDigits: targetDecimalDigits * 2,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this + [addition]\n  ///\n  /// The resulting [decimalDigits] is the larger decimalDigits of\n  /// the two operands.\n  Fixed operator +(Fixed addition) {\n    final targetDecimalDigits = max(decimalDigits, addition.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledAddition = _rescale(addition.minorUnits,\n        existingDecimalDigits: addition.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis + scaledAddition,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns -this.\n  ///\n  /// The resulting [decimalDigits] is the [decimalDigits] of this.\n  Fixed operator -() =>\n      Fixed.fromBigInt(-minorUnits, decimalDigits: decimalDigits);\n\n  /// Returns this - [subtration]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator -(Fixed subtration) {\n    final targetDecimalDigits = max(decimalDigits, subtration.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledSubtraction = _rescale(subtration.minorUnits,\n        existingDecimalDigits: subtration.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis - scaledSubtraction,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this / [denominator]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator /(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final numResult = numerator / scaledDenominator;\n\n    return Fixed.fromNum(numResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns  this / [divisor].\n  ///\n  /// The decimalDigits is left unchanged.\n  Fixed divide(num divisor) => this * Fixed.fromNum(1.0 / divisor.toDouble());\n\n  /// Returns the this ~/ [denominator]\n  ///\n  /// This is a truncating division operator.\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator ~/(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator ~/ scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// less than operator\n  bool operator <(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits < scaled.two.minorUnits;\n  }\n\n  /// less than or equal operator\n  bool operator <=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits <= scaled.two.minorUnits;\n  }\n\n  /// Two Fixed values are considered equal if they have\n  /// the same value irrespective of decimalDigits.\n  @override\n  bool operator ==(Object other) {\n    if (other is! Fixed) {\n      return false;\n    }\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits == scaled.two.minorUnits;\n  }\n\n  /// greater than operator\n  bool operator >(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits > scaled.two.minorUnits;\n  }\n\n  /// greater than or equal operator\n  bool operator >=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits >= scaled.two.minorUnits;\n  }\n\n  ///  Spread the value across 'n' Fixed values according\n  /// to the supplie [ratios].\n  ///\n  /// 'n' is controlled by the number\n  /// of [ratios] passed.\n  List<Fixed> allocationAccordingTo(List<int> ratios) {\n    if (ratios.isEmpty) {\n      throw ArgumentError.value(ratios, 'ratios',\n          'List of ratios must not be empty, cannot allocate to nothing.');\n    }\n\n    return _doAllocationAccordingTo(ratios.map((ratio) {\n      if (ratio < 0) {\n        throw ArgumentError.value(\n            ratios, 'ratios', 'Ratio must not be negative.');\n      }\n\n      return BigInt.from(ratio);\n    }).toList());\n  }\n\n  /// Two [Fixed] instances are the same if they have\n  /// the same [minorUnits] and the same [decimalDigits].\n  @override\n  int compareTo(Fixed other) {\n    if (minorUnits == other.minorUnits) {\n      return decimalDigits.compareTo(other.decimalDigits);\n    } else {\n      return minorUnits.compareTo(other.minorUnits);\n    }\n  }\n\n  /// Formats a [Fixed] value into a String according to the\n  /// passed [pattern].\n  ///\n  /// If [invertSeparator] is true then the role of the '.' and ',' are\n  /// reversed. By default the '.' is used as the decimal separator\n  /// whilst the ',' is used as the grouping separator.\n  ///\n  /// 0 A single digit\n  /// # A single digit, omitted if the value is zero\n  /// . or , Decimal separator dependant on [invertSeparator]\n  /// - Minus sign\n  /// , or . Grouping separator dependant on [invertSeparator]\n  /// space Space character.\n  ///\n  String format(String pattern, {bool invertSeparator = false}) {\n    if (!invertSeparator) {\n      return FixedEncoder(pattern).encode(this);\n    } else {\n      return FixedEncoder(pattern, decimalSeparator: ',', groupSeparator: '.')\n          .encode(this);\n    }\n  }\n\n  /// Formats the value using the [locale]'s decimal pattern.\n  ///\n  /// If you don't provide a [locale] then we use the systems\n  /// default locale.\n  String formatIntl([String? locale]) {\n    locale ??= Intl.defaultLocale;\n\n    final formatter = NumberFormat.decimalPattern(locale);\n    return DecimalFormatter(formatter).format(toDecimal());\n  }\n\n  /// Returns this * [multiplier]\n  ///\n  /// if you pass [decimalDigits] then it will be used\n  /// to determine the number of decimals to retain from [multiplier].\n  /// If you don't pass [decimalDigits] then this.decimalDigits\n  /// will be used.\n  ///\n  /// The result's [decimalDigits] == [decimalDigits] * 2.\n  Fixed multiply(num multiplier, {int? decimalDigits}) =>\n      this *\n      Fixed.fromNum(multiplier,\n          decimalDigits: decimalDigits ?? this.decimalDigits);\n\n  /// Returns this ^ [exponent]\n  ///\n  /// The returned value has the same [decimalDigits] as this.\n  Fixed pow(int exponent) =>\n      Fixed.fromBigInt(minorUnits.pow(exponent), decimalDigits: decimalDigits);\n\n  /// Returns the remainder of dividing this / [divisor].\n  ///\n  /// The [decimalDigits] is largest of the two decimalDigits\n  /// + the decimalDigits of the [divisor].\n  Fixed remainder(Fixed divisor) => this - (this ~/ divisor) * divisor;\n\n  /// Returns the value as a [Decimal]\n  Decimal toDecimal() => Decimal.parse(toString());\n\n  /// Truncates this and returns the integer part.\n  int toInt() => minorUnits == BigInt.zero\n      ? 0\n      : (minorUnits ~/ BigInt.from(10).pow(decimalDigits)).toInt();\n\n  /// Returns the [Fixed] value using [decimalDigits] to control the\n  /// displayed number of decimal places.\n  ///\n  /// ```dart\n  /// Fixed.fromInt(1000, decimalDigits: 3).toString() == '1.000'\n  /// ```\n  ///\n  /// If you need to modify the separators or\n  /// control the returned decimalDigits use [format].\n  @override\n  String toString() {\n    final String pattern;\n    if (decimalDigits == 0) {\n      pattern = '#';\n    } else {\n      pattern = '0.${'#' * decimalDigits}';\n    }\n    final encoder = FixedEncoder(pattern);\n\n    return encoder.encode(this);\n  }\n\n  List<Fixed> _doAllocationAccordingTo(List<BigInt> ratios) {\n    final totalVolume = ratios.reduce((a, b) => a + b);\n\n    if (totalVolume == BigInt.zero) {\n      throw ArgumentError('Sum of ratios must be greater than zero, '\n          'cannot allocate to nothing.');\n    }\n\n    final absoluteValue = minorUnits.abs();\n    var remainder = absoluteValue;\n\n    final shares = ratios.map((ratio) {\n      final share = absoluteValue * ratio ~/ totalVolume;\n      remainder -= share;\n\n      return share;\n    }).toList();\n\n    for (var i = 0; remainder > BigInt.zero && i < shares.length; ++i) {\n      if (ratios[i] > BigInt.zero) {\n        shares[i] += BigInt.one;\n        remainder -= BigInt.one;\n      }\n    }\n\n    return shares\n        .map((share) => Fixed.fromBigInt(minorUnits.isNegative ? -share : share,\n            decimalDigits: decimalDigits))\n        .toList();\n  }\n\n  /// Works the same as [Fixed.parse] but returns a null\n  /// if the [amount] cannot be parsed.\n  ///\n  /// Sets the [decimalDigits] of the returned number to [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  static Fixed? tryParse(\n    String amount, {\n    int decimalDigits = 2,\n    bool invertSeparator = false,\n  }) {\n    try {\n      return Fixed.parse(amount,\n          //pattern: pattern,\n          decimalDigits: decimalDigits,\n          invertSeparator: invertSeparator);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  static void _checkDecimalDigits(int decimalDigits) {\n    if (decimalDigits < 0) {\n      throw FixedException(\n          'A negative decimalDigits of $decimalDigits was passed. '\n          'The decimalDigits must be >= 0.');\n    }\n  }\n\n  static BigInt _rescale(\n    BigInt minorUnits, {\n    required int existingDecimalDigits,\n    required int targetDecimalDigits,\n  }) {\n    if (existingDecimalDigits < targetDecimalDigits) {\n      // Increase decimalDigits:\n      //  just multiply by 10^(targetDecimalDigits - existingDecimalDigits)\n      final diff = targetDecimalDigits - existingDecimalDigits;\n      return minorUnits * BigInt.from(10).pow(diff);\n    } else if (existingDecimalDigits > targetDecimalDigits) {\n      // Reduce decimalDigits with round-half-away-from-zero\n      final diff = existingDecimalDigits - targetDecimalDigits;\n      return _roundHalfAwayFromZero(minorUnits, diff);\n    } else {\n      // No change\n      return minorUnits;\n    }\n  }\n\n  /// Divides [value] by 10^[decimalDigitsDiff], then rounds half\n  ///   away from zero.\n  /// Example: If [value] = 15241578750190521000000, decimalDigitsDiff = 6,\n  ///   we want to do integer division plus correct\n  ///   rounding—without floating-point.\n  static BigInt _roundHalfAwayFromZero(BigInt value, int decimalDigitsDiff) {\n    final divisor = BigInt.from(10).pow(decimalDigitsDiff);\n    if (divisor == BigInt.one) {\n      // Nothing to scale\n      return value;\n    }\n\n    // Determine sign; work with absolute\n    final isNegative = value.isNegative;\n    final absValue = isNegative ? -value : value;\n\n    // Integer division and remainder\n    final absQuotient = absValue ~/ divisor;\n    final absRemainder = absValue % divisor; // remainder in [0 .. divisor-1]\n\n    // Compare remainder to half of divisor\n    // If remainder * 2 == divisor => exactly half => also round up\n    final twiceRemainder = absRemainder << 1; // same as absRemainder * 2\n\n    if (twiceRemainder > divisor) {\n      // remainder > 0.5 => round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    } else if (twiceRemainder < divisor) {\n      // remainder < 0.5 => round down\n      return isNegative ? -absQuotient : absQuotient;\n    } else {\n      // remainder == exactly 0.5 => round half AWAY from zero => also round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    }\n  }\n\n  _Scaled2 _scale(Fixed fixed, Fixed other) {\n    if (fixed.decimalDigits > other.decimalDigits) {\n      return _Scaled2(\n          fixed,\n          Fixed.fromBigInt(\n              _rescale(other.minorUnits,\n                  existingDecimalDigits: other.decimalDigits,\n                  targetDecimalDigits: fixed.decimalDigits),\n              decimalDigits: fixed.decimalDigits));\n    }\n    if (fixed.decimalDigits < other.decimalDigits) {\n      return _Scaled2(\n          Fixed.fromBigInt(\n              _rescale(fixed.minorUnits,\n                  existingDecimalDigits: fixed.decimalDigits,\n                  targetDecimalDigits: other.decimalDigits),\n              decimalDigits: other.decimalDigits),\n          other);\n    }\n    return _Scaled2(fixed, other);\n  }"}
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-04T09:05:47.325839 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-04T09:05:47.325839
[ReorderMembersFix] 2025-10-04T09:05:48.580422 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/fixed/lib/src/fixed.dart:
[ReorderMembersFix] 2025-10-04T09:05:48.580422 ConflictingEditException: {"offset":23097,"length":57,"replacement":"  Fixed one;\n\n  Fixed two;\n\n  _Scaled2(this.one, this.two);"} conflicts with {"offset":23097,"length":57,"replacement":"  Fixed one;\n\n  Fixed two;\n\n  _Scaled2(this.one, this.two);"}
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-04T09:05:48.580422 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-04T09:05:48.580422
[ReorderMembersFix] 2025-10-04T09:05:48.589699 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/fixed/lib/src/fixed.dart:
[ReorderMembersFix] 2025-10-04T09:05:48.589699 ConflictingEditException: {"offset":938,"length":22138,"replacement":"  static const int maxInt = platform_consts.maxInt;\n\n  static const int minInt = platform_consts.minInt;\n\n  // The value zero with [decimalDigits] = 0\n  static final zero = Fixed.fromNum(0, decimalDigits: 0);\n\n  /// The value 1 with [decimalDigits] =0\n  static final one = Fixed.fromNum(1, decimalDigits: 0);\n\n  /// The value 2 with [decimalDigits] = 0\n  static final two = Fixed.fromNum(2, decimalDigits: 0);\n\n  /// The value 10 with [decimalDigits] = 0\n  static final ten = Fixed.fromNum(10, decimalDigits: 0);\n\n  /// The value of this [Fixed] instance stored as minorUnits in a [BigInt].\n  /// If the decimalDigits is 2 then 1 is stored as 100\n  /// If the decimalDigits is 3 then 1 is stored as 1000.\n  late final BigInt minorUnits;\n\n  /// Returns this as minor units.\n  ///\n  /// e.g.\n  /// ```dart\n  /// Fixed.fromNum(1.234, decimalDigits: 3).minorUnits = 1234\n  ///\n  /// late final BigInt minorUnits =\n  ///    (value * Decimal.ten.pow(decimalDigits)).toBigInt();\n  /// ```\n  ///\n  /// The decimalDigits with which we store the amount.\n  ///\n  /// A decimalDigits of 2 means we store the value to\n  /// two decimal places.\n  final int decimalDigits;\n\n  /// Parses [amount] as a decimal value.\n  ///\n  /// The [decimalDigits] controls the number of decimal\n  /// places to be retained.\n  /// If [decimalDigits] is not passed then the decimalDigits is determined\n  /// by the number of decimal places present in the passed [amount].\n  ///\n  /// If [decimalDigits] < 0 then a FixedException will be thrown.\n  /// If the [amount] isn't valid then\n  /// a [FixedParseException] is thrown.\n  ///\n  /// If [invertSeparator] = false then we\n  /// assume '.' is the decimal place and ',' is the group separator.\n  ///\n  /// If [invertSeparator] = true then we\n  /// assume ',' is the decimal place and '.' is the group separator.\n  factory Fixed.parse(\n    String amount, {\n    int? decimalDigits,\n    bool invertSeparator = false,\n  }) {\n    if (decimalDigits != null) {\n      _checkDecimalDigits(decimalDigits);\n    }\n\n    final decimalSeparator = invertSeparator ? ',' : '.';\n\n    final decoder = FixedDecoder(\n      // TODO(bsutton): remove the pattern from the decoder\n      // as I don't think we actually need one.\n      // We just need to know what char is the decimal place.\n      pattern: '#$decimalSeparator#',\n      groupSeparator: invertSeparator ? '.' : ',',\n      decimalSeparator: invertSeparator ? ',' : '.',\n    );\n    final minorUnitsAndScale = decoder.decode(amount, decimalDigits);\n    final targetDecimalDigits =\n        decimalDigits ?? minorUnitsAndScale.decimalDigits;\n    return Fixed.fromBigInt(\n        _rescale(minorUnitsAndScale.value,\n            existingDecimalDigits: minorUnitsAndScale.decimalDigits,\n            targetDecimalDigits: targetDecimalDigits),\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Creates a Fixed value from a double\n  /// or integer value and stores the value with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  ///\n  /// This method will throw [AmountTooLargeException]\n  /// if the [decimalDigits] is > 20 or the absolute value\n  /// is greater than 10^21\n  ///\n  /// If you need larger numbers then use one of the alternate\n  /// constructors.\n  Fixed.fromNum(num amount, {this.decimalDigits = 16}) {\n    ///\n    /// ```dart\n    /// final value = Fixed.fromNum(1.2345, decimalDigits: 2);\n    /// print(value) -> 1.23\n    /// ```\n    ///\n    _checkDecimalDigits(decimalDigits);\n\n    if (decimalDigits > 20) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n\n    final decoder = FixedDecoder(\n      pattern: '#.#',\n      groupSeparator: ',',\n      decimalSeparator: '.',\n    );\n\n    /// toStringAsFixed is limited to a max of 20 decimal places\n    try {\n      final fixed = amount.toStringAsFixed(decimalDigits);\n      if (fixed.contains('e')) {\n        throw AmountTooLargeException('The amount must be less than 10^20');\n      }\n      final decimalAndScale = decoder.decode(fixed, decimalDigits);\n      minorUnits = decimalAndScale.value;\n      // We catch the error so we can provide a more meaningful message.\n      // ignore: avoid_catching_errors\n    } on RangeError catch (_) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n  }\n\n  /// Creates Fixed instance from [minorUnits] with the given\n  /// [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  ///\n  /// e.g.\n  /// ```dart\n  /// final fixed = Fixed.fromInt(100, decimalDigits: 2)\n  /// print(fixed) : 1.00\n  /// ```\n  Fixed.fromInt(int minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n    this.minorUnits = BigInt.from(minorUnits);\n  }\n\n  /// Creates a Fixed instance from [amount] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  Fixed.fromDecimal(Decimal amount, {this.decimalDigits = 16}) {\n    _checkDecimalDigits(decimalDigits);\n    minorUnits = _rescale(\n      (amount * Decimal.ten.pow(amount.scale).toDecimal()).toBigInt(),\n      existingDecimalDigits: amount.scale,\n      targetDecimalDigits: decimalDigits,\n    );\n  }\n\n  /// Creates a Fixed instance from [minorUnits] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  Fixed.fromBigInt(this.minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the decimalDigits to [decimalDigits].\n  @Deprecated('Use the copyWith member method')\n  factory Fixed.copyWith(Fixed fixed, {int? decimalDigits}) {\n    decimalDigits ??= fixed.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(fixed.minorUnits,\n            existingDecimalDigits: fixed.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the scale to [decimalDigits].\n  Fixed copyWith({int? decimalDigits}) {\n    decimalDigits ??= this.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(minorUnits,\n            existingDecimalDigits: this.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns the absolute value of this.\n  Fixed get abs => isNegative ? -this : this;\n\n  /// The component of the number after the decimal point.\n  ///\n  /// The returned value will always be a +ve no.\n  /// The [integerPart] will contain the sign.\n  BigInt get decimalPart => (minorUnits - integerPart * scaleFactor).abs();\n\n  String decimalPartAsString() {\n    var whole = minorUnits.toString();\n\n    /// we will add the -ve when we know where it is to be placed.\n    if (whole.startsWith('-')) {\n      whole = whole.substring(1);\n    }\n\n    if (whole.length < decimalDigits) {\n      whole = whole.padLeft(decimalDigits, '0');\n    }\n\n    final decimalStart = whole.length - decimalDigits;\n    final decimalPart = whole.substring(decimalStart);\n\n    return decimalPart;\n  }\n\n  @override\n  int get hashCode => minorUnits.hashCode + decimalDigits.hashCode;\n\n  /// The component of the number before the decimal point\n  BigInt get integerPart => minorUnits ~/ BigInt.from(10).pow(decimalDigits);\n\n  /// returns true of the value of this is negative.\n  bool get isNegative => minorUnits < BigInt.zero;\n\n  /// returns true if the value of this is positive.\n  bool get isPositive => minorUnits > BigInt.zero;\n\n  /// returns true if the value of this is zero.\n  bool get isZero => minorUnits == BigInt.zero;\n\n  /// Returns 10 ^ [decimalDigits]\n  BigInt get scaleFactor => BigInt.from(10).pow(decimalDigits);\n\n  /// Returns the sign of this amount.\n  ///\n  /// Returns 0 for zero, -1 for values less than zero and +1 for\n  ///  values greater than zero.\n  int get sign => minorUnits.isNegative\n      ? -1\n      : minorUnits == BigInt.zero\n          ? 0\n          : 1;\n\n  /// Returns this % [denominator].\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator %(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator % scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this * [multiplier].\n  ///\n  /// The result's [decimalDigits] is the sum of the [decimalDigits] of the two\n  /// operands.\n  Fixed operator *(Fixed multiplier) {\n    final targetDecimalDigits = decimalDigits + multiplier.decimalDigits;\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledMultiplier = _rescale(multiplier.minorUnits,\n        existingDecimalDigits: multiplier.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final rawResult = scaledThis * scaledMultiplier;\n\n    final scaledResult = _rescale(rawResult,\n        existingDecimalDigits: targetDecimalDigits * 2,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this + [addition]\n  ///\n  /// The resulting [decimalDigits] is the larger decimalDigits of\n  /// the two operands.\n  Fixed operator +(Fixed addition) {\n    final targetDecimalDigits = max(decimalDigits, addition.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledAddition = _rescale(addition.minorUnits,\n        existingDecimalDigits: addition.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis + scaledAddition,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns -this.\n  ///\n  /// The resulting [decimalDigits] is the [decimalDigits] of this.\n  Fixed operator -() =>\n      Fixed.fromBigInt(-minorUnits, decimalDigits: decimalDigits);\n\n  /// Returns this - [subtration]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator -(Fixed subtration) {\n    final targetDecimalDigits = max(decimalDigits, subtration.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledSubtraction = _rescale(subtration.minorUnits,\n        existingDecimalDigits: subtration.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis - scaledSubtraction,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this / [denominator]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator /(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final numResult = numerator / scaledDenominator;\n\n    return Fixed.fromNum(numResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns  this / [divisor].\n  ///\n  /// The decimalDigits is left unchanged.\n  Fixed divide(num divisor) => this * Fixed.fromNum(1.0 / divisor.toDouble());\n\n  /// Returns the this ~/ [denominator]\n  ///\n  /// This is a truncating division operator.\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator ~/(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator ~/ scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// less than operator\n  bool operator <(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits < scaled.two.minorUnits;\n  }\n\n  /// less than or equal operator\n  bool operator <=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits <= scaled.two.minorUnits;\n  }\n\n  /// Two Fixed values are considered equal if they have\n  /// the same value irrespective of decimalDigits.\n  @override\n  bool operator ==(Object other) {\n    if (other is! Fixed) {\n      return false;\n    }\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits == scaled.two.minorUnits;\n  }\n\n  /// greater than operator\n  bool operator >(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits > scaled.two.minorUnits;\n  }\n\n  /// greater than or equal operator\n  bool operator >=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits >= scaled.two.minorUnits;\n  }\n\n  ///  Spread the value across 'n' Fixed values according\n  /// to the supplie [ratios].\n  ///\n  /// 'n' is controlled by the number\n  /// of [ratios] passed.\n  List<Fixed> allocationAccordingTo(List<int> ratios) {\n    if (ratios.isEmpty) {\n      throw ArgumentError.value(ratios, 'ratios',\n          'List of ratios must not be empty, cannot allocate to nothing.');\n    }\n\n    return _doAllocationAccordingTo(ratios.map((ratio) {\n      if (ratio < 0) {\n        throw ArgumentError.value(\n            ratios, 'ratios', 'Ratio must not be negative.');\n      }\n\n      return BigInt.from(ratio);\n    }).toList());\n  }\n\n  /// Two [Fixed] instances are the same if they have\n  /// the same [minorUnits] and the same [decimalDigits].\n  @override\n  int compareTo(Fixed other) {\n    if (minorUnits == other.minorUnits) {\n      return decimalDigits.compareTo(other.decimalDigits);\n    } else {\n      return minorUnits.compareTo(other.minorUnits);\n    }\n  }\n\n  /// Formats a [Fixed] value into a String according to the\n  /// passed [pattern].\n  ///\n  /// If [invertSeparator] is true then the role of the '.' and ',' are\n  /// reversed. By default the '.' is used as the decimal separator\n  /// whilst the ',' is used as the grouping separator.\n  ///\n  /// 0 A single digit\n  /// # A single digit, omitted if the value is zero\n  /// . or , Decimal separator dependant on [invertSeparator]\n  /// - Minus sign\n  /// , or . Grouping separator dependant on [invertSeparator]\n  /// space Space character.\n  ///\n  String format(String pattern, {bool invertSeparator = false}) {\n    if (!invertSeparator) {\n      return FixedEncoder(pattern).encode(this);\n    } else {\n      return FixedEncoder(pattern, decimalSeparator: ',', groupSeparator: '.')\n          .encode(this);\n    }\n  }\n\n  /// Formats the value using the [locale]'s decimal pattern.\n  ///\n  /// If you don't provide a [locale] then we use the systems\n  /// default locale.\n  String formatIntl([String? locale]) {\n    locale ??= Intl.defaultLocale;\n\n    final formatter = NumberFormat.decimalPattern(locale);\n    return DecimalFormatter(formatter).format(toDecimal());\n  }\n\n  /// Returns this * [multiplier]\n  ///\n  /// if you pass [decimalDigits] then it will be used\n  /// to determine the number of decimals to retain from [multiplier].\n  /// If you don't pass [decimalDigits] then this.decimalDigits\n  /// will be used.\n  ///\n  /// The result's [decimalDigits] == [decimalDigits] * 2.\n  Fixed multiply(num multiplier, {int? decimalDigits}) =>\n      this *\n      Fixed.fromNum(multiplier,\n          decimalDigits: decimalDigits ?? this.decimalDigits);\n\n  /// Returns this ^ [exponent]\n  ///\n  /// The returned value has the same [decimalDigits] as this.\n  Fixed pow(int exponent) =>\n      Fixed.fromBigInt(minorUnits.pow(exponent), decimalDigits: decimalDigits);\n\n  /// Returns the remainder of dividing this / [divisor].\n  ///\n  /// The [decimalDigits] is largest of the two decimalDigits\n  /// + the decimalDigits of the [divisor].\n  Fixed remainder(Fixed divisor) => this - (this ~/ divisor) * divisor;\n\n  /// Returns the value as a [Decimal]\n  Decimal toDecimal() => Decimal.parse(toString());\n\n  /// Truncates this and returns the integer part.\n  int toInt() => minorUnits == BigInt.zero\n      ? 0\n      : (minorUnits ~/ BigInt.from(10).pow(decimalDigits)).toInt();\n\n  /// Returns the [Fixed] value using [decimalDigits] to control the\n  /// displayed number of decimal places.\n  ///\n  /// ```dart\n  /// Fixed.fromInt(1000, decimalDigits: 3).toString() == '1.000'\n  /// ```\n  ///\n  /// If you need to modify the separators or\n  /// control the returned decimalDigits use [format].\n  @override\n  String toString() {\n    final String pattern;\n    if (decimalDigits == 0) {\n      pattern = '#';\n    } else {\n      pattern = '0.${'#' * decimalDigits}';\n    }\n    final encoder = FixedEncoder(pattern);\n\n    return encoder.encode(this);\n  }\n\n  List<Fixed> _doAllocationAccordingTo(List<BigInt> ratios) {\n    final totalVolume = ratios.reduce((a, b) => a + b);\n\n    if (totalVolume == BigInt.zero) {\n      throw ArgumentError('Sum of ratios must be greater than zero, '\n          'cannot allocate to nothing.');\n    }\n\n    final absoluteValue = minorUnits.abs();\n    var remainder = absoluteValue;\n\n    final shares = ratios.map((ratio) {\n      final share = absoluteValue * ratio ~/ totalVolume;\n      remainder -= share;\n\n      return share;\n    }).toList();\n\n    for (var i = 0; remainder > BigInt.zero && i < shares.length; ++i) {\n      if (ratios[i] > BigInt.zero) {\n        shares[i] += BigInt.one;\n        remainder -= BigInt.one;\n      }\n    }\n\n    return shares\n        .map((share) => Fixed.fromBigInt(minorUnits.isNegative ? -share : share,\n            decimalDigits: decimalDigits))\n        .toList();\n  }\n\n  /// Works the same as [Fixed.parse] but returns a null\n  /// if the [amount] cannot be parsed.\n  ///\n  /// Sets the [decimalDigits] of the returned number to [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  static Fixed? tryParse(\n    String amount, {\n    int decimalDigits = 2,\n    bool invertSeparator = false,\n  }) {\n    try {\n      return Fixed.parse(amount,\n          //pattern: pattern,\n          decimalDigits: decimalDigits,\n          invertSeparator: invertSeparator);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  static void _checkDecimalDigits(int decimalDigits) {\n    if (decimalDigits < 0) {\n      throw FixedException(\n          'A negative decimalDigits of $decimalDigits was passed. '\n          'The decimalDigits must be >= 0.');\n    }\n  }\n\n  static BigInt _rescale(\n    BigInt minorUnits, {\n    required int existingDecimalDigits,\n    required int targetDecimalDigits,\n  }) {\n    if (existingDecimalDigits < targetDecimalDigits) {\n      // Increase decimalDigits:\n      //  just multiply by 10^(targetDecimalDigits - existingDecimalDigits)\n      final diff = targetDecimalDigits - existingDecimalDigits;\n      return minorUnits * BigInt.from(10).pow(diff);\n    } else if (existingDecimalDigits > targetDecimalDigits) {\n      // Reduce decimalDigits with round-half-away-from-zero\n      final diff = existingDecimalDigits - targetDecimalDigits;\n      return _roundHalfAwayFromZero(minorUnits, diff);\n    } else {\n      // No change\n      return minorUnits;\n    }\n  }\n\n  /// Divides [value] by 10^[decimalDigitsDiff], then rounds half\n  ///   away from zero.\n  /// Example: If [value] = 15241578750190521000000, decimalDigitsDiff = 6,\n  ///   we want to do integer division plus correct\n  ///   rounding—without floating-point.\n  static BigInt _roundHalfAwayFromZero(BigInt value, int decimalDigitsDiff) {\n    final divisor = BigInt.from(10).pow(decimalDigitsDiff);\n    if (divisor == BigInt.one) {\n      // Nothing to scale\n      return value;\n    }\n\n    // Determine sign; work with absolute\n    final isNegative = value.isNegative;\n    final absValue = isNegative ? -value : value;\n\n    // Integer division and remainder\n    final absQuotient = absValue ~/ divisor;\n    final absRemainder = absValue % divisor; // remainder in [0 .. divisor-1]\n\n    // Compare remainder to half of divisor\n    // If remainder * 2 == divisor => exactly half => also round up\n    final twiceRemainder = absRemainder << 1; // same as absRemainder * 2\n\n    if (twiceRemainder > divisor) {\n      // remainder > 0.5 => round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    } else if (twiceRemainder < divisor) {\n      // remainder < 0.5 => round down\n      return isNegative ? -absQuotient : absQuotient;\n    } else {\n      // remainder == exactly 0.5 => round half AWAY from zero => also round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    }\n  }\n\n  _Scaled2 _scale(Fixed fixed, Fixed other) {\n    if (fixed.decimalDigits > other.decimalDigits) {\n      return _Scaled2(\n          fixed,\n          Fixed.fromBigInt(\n              _rescale(other.minorUnits,\n                  existingDecimalDigits: other.decimalDigits,\n                  targetDecimalDigits: fixed.decimalDigits),\n              decimalDigits: fixed.decimalDigits));\n    }\n    if (fixed.decimalDigits < other.decimalDigits) {\n      return _Scaled2(\n          Fixed.fromBigInt(\n              _rescale(fixed.minorUnits,\n                  existingDecimalDigits: fixed.decimalDigits,\n                  targetDecimalDigits: other.decimalDigits),\n              decimalDigits: other.decimalDigits),\n          other);\n    }\n    return _Scaled2(fixed, other);\n  }"} conflicts with {"offset":938,"length":22138,"replacement":"  static const int maxInt = platform_consts.maxInt;\n\n  static const int minInt = platform_consts.minInt;\n\n  // The value zero with [decimalDigits] = 0\n  static final zero = Fixed.fromNum(0, decimalDigits: 0);\n\n  /// The value 1 with [decimalDigits] =0\n  static final one = Fixed.fromNum(1, decimalDigits: 0);\n\n  /// The value 2 with [decimalDigits] = 0\n  static final two = Fixed.fromNum(2, decimalDigits: 0);\n\n  /// The value 10 with [decimalDigits] = 0\n  static final ten = Fixed.fromNum(10, decimalDigits: 0);\n\n  /// The value of this [Fixed] instance stored as minorUnits in a [BigInt].\n  /// If the decimalDigits is 2 then 1 is stored as 100\n  /// If the decimalDigits is 3 then 1 is stored as 1000.\n  late final BigInt minorUnits;\n\n  /// Returns this as minor units.\n  ///\n  /// e.g.\n  /// ```dart\n  /// Fixed.fromNum(1.234, decimalDigits: 3).minorUnits = 1234\n  ///\n  /// late final BigInt minorUnits =\n  ///    (value * Decimal.ten.pow(decimalDigits)).toBigInt();\n  /// ```\n  ///\n  /// The decimalDigits with which we store the amount.\n  ///\n  /// A decimalDigits of 2 means we store the value to\n  /// two decimal places.\n  final int decimalDigits;\n\n  /// Parses [amount] as a decimal value.\n  ///\n  /// The [decimalDigits] controls the number of decimal\n  /// places to be retained.\n  /// If [decimalDigits] is not passed then the decimalDigits is determined\n  /// by the number of decimal places present in the passed [amount].\n  ///\n  /// If [decimalDigits] < 0 then a FixedException will be thrown.\n  /// If the [amount] isn't valid then\n  /// a [FixedParseException] is thrown.\n  ///\n  /// If [invertSeparator] = false then we\n  /// assume '.' is the decimal place and ',' is the group separator.\n  ///\n  /// If [invertSeparator] = true then we\n  /// assume ',' is the decimal place and '.' is the group separator.\n  factory Fixed.parse(\n    String amount, {\n    int? decimalDigits,\n    bool invertSeparator = false,\n  }) {\n    if (decimalDigits != null) {\n      _checkDecimalDigits(decimalDigits);\n    }\n\n    final decimalSeparator = invertSeparator ? ',' : '.';\n\n    final decoder = FixedDecoder(\n      // TODO(bsutton): remove the pattern from the decoder\n      // as I don't think we actually need one.\n      // We just need to know what char is the decimal place.\n      pattern: '#$decimalSeparator#',\n      groupSeparator: invertSeparator ? '.' : ',',\n      decimalSeparator: invertSeparator ? ',' : '.',\n    );\n    final minorUnitsAndScale = decoder.decode(amount, decimalDigits);\n    final targetDecimalDigits =\n        decimalDigits ?? minorUnitsAndScale.decimalDigits;\n    return Fixed.fromBigInt(\n        _rescale(minorUnitsAndScale.value,\n            existingDecimalDigits: minorUnitsAndScale.decimalDigits,\n            targetDecimalDigits: targetDecimalDigits),\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Creates a Fixed value from a double\n  /// or integer value and stores the value with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  ///\n  /// This method will throw [AmountTooLargeException]\n  /// if the [decimalDigits] is > 20 or the absolute value\n  /// is greater than 10^21\n  ///\n  /// If you need larger numbers then use one of the alternate\n  /// constructors.\n  Fixed.fromNum(num amount, {this.decimalDigits = 16}) {\n    ///\n    /// ```dart\n    /// final value = Fixed.fromNum(1.2345, decimalDigits: 2);\n    /// print(value) -> 1.23\n    /// ```\n    ///\n    _checkDecimalDigits(decimalDigits);\n\n    if (decimalDigits > 20) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n\n    final decoder = FixedDecoder(\n      pattern: '#.#',\n      groupSeparator: ',',\n      decimalSeparator: '.',\n    );\n\n    /// toStringAsFixed is limited to a max of 20 decimal places\n    try {\n      final fixed = amount.toStringAsFixed(decimalDigits);\n      if (fixed.contains('e')) {\n        throw AmountTooLargeException('The amount must be less than 10^20');\n      }\n      final decimalAndScale = decoder.decode(fixed, decimalDigits);\n      minorUnits = decimalAndScale.value;\n      // We catch the error so we can provide a more meaningful message.\n      // ignore: avoid_catching_errors\n    } on RangeError catch (_) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n  }\n\n  /// Creates Fixed instance from [minorUnits] with the given\n  /// [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  ///\n  /// e.g.\n  /// ```dart\n  /// final fixed = Fixed.fromInt(100, decimalDigits: 2)\n  /// print(fixed) : 1.00\n  /// ```\n  Fixed.fromInt(int minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n    this.minorUnits = BigInt.from(minorUnits);\n  }\n\n  /// Creates a Fixed instance from [amount] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  Fixed.fromDecimal(Decimal amount, {this.decimalDigits = 16}) {\n    _checkDecimalDigits(decimalDigits);\n    minorUnits = _rescale(\n      (amount * Decimal.ten.pow(amount.scale).toDecimal()).toBigInt(),\n      existingDecimalDigits: amount.scale,\n      targetDecimalDigits: decimalDigits,\n    );\n  }\n\n  /// Creates a Fixed instance from [minorUnits] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  Fixed.fromBigInt(this.minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the decimalDigits to [decimalDigits].\n  @Deprecated('Use the copyWith member method')\n  factory Fixed.copyWith(Fixed fixed, {int? decimalDigits}) {\n    decimalDigits ??= fixed.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(fixed.minorUnits,\n            existingDecimalDigits: fixed.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the scale to [decimalDigits].\n  Fixed copyWith({int? decimalDigits}) {\n    decimalDigits ??= this.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(minorUnits,\n            existingDecimalDigits: this.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns the absolute value of this.\n  Fixed get abs => isNegative ? -this : this;\n\n  /// The component of the number after the decimal point.\n  ///\n  /// The returned value will always be a +ve no.\n  /// The [integerPart] will contain the sign.\n  BigInt get decimalPart => (minorUnits - integerPart * scaleFactor).abs();\n\n  String decimalPartAsString() {\n    var whole = minorUnits.toString();\n\n    /// we will add the -ve when we know where it is to be placed.\n    if (whole.startsWith('-')) {\n      whole = whole.substring(1);\n    }\n\n    if (whole.length < decimalDigits) {\n      whole = whole.padLeft(decimalDigits, '0');\n    }\n\n    final decimalStart = whole.length - decimalDigits;\n    final decimalPart = whole.substring(decimalStart);\n\n    return decimalPart;\n  }\n\n  @override\n  int get hashCode => minorUnits.hashCode + decimalDigits.hashCode;\n\n  /// The component of the number before the decimal point\n  BigInt get integerPart => minorUnits ~/ BigInt.from(10).pow(decimalDigits);\n\n  /// returns true of the value of this is negative.\n  bool get isNegative => minorUnits < BigInt.zero;\n\n  /// returns true if the value of this is positive.\n  bool get isPositive => minorUnits > BigInt.zero;\n\n  /// returns true if the value of this is zero.\n  bool get isZero => minorUnits == BigInt.zero;\n\n  /// Returns 10 ^ [decimalDigits]\n  BigInt get scaleFactor => BigInt.from(10).pow(decimalDigits);\n\n  /// Returns the sign of this amount.\n  ///\n  /// Returns 0 for zero, -1 for values less than zero and +1 for\n  ///  values greater than zero.\n  int get sign => minorUnits.isNegative\n      ? -1\n      : minorUnits == BigInt.zero\n          ? 0\n          : 1;\n\n  /// Returns this % [denominator].\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator %(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator % scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this * [multiplier].\n  ///\n  /// The result's [decimalDigits] is the sum of the [decimalDigits] of the two\n  /// operands.\n  Fixed operator *(Fixed multiplier) {\n    final targetDecimalDigits = decimalDigits + multiplier.decimalDigits;\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledMultiplier = _rescale(multiplier.minorUnits,\n        existingDecimalDigits: multiplier.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final rawResult = scaledThis * scaledMultiplier;\n\n    final scaledResult = _rescale(rawResult,\n        existingDecimalDigits: targetDecimalDigits * 2,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this + [addition]\n  ///\n  /// The resulting [decimalDigits] is the larger decimalDigits of\n  /// the two operands.\n  Fixed operator +(Fixed addition) {\n    final targetDecimalDigits = max(decimalDigits, addition.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledAddition = _rescale(addition.minorUnits,\n        existingDecimalDigits: addition.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis + scaledAddition,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns -this.\n  ///\n  /// The resulting [decimalDigits] is the [decimalDigits] of this.\n  Fixed operator -() =>\n      Fixed.fromBigInt(-minorUnits, decimalDigits: decimalDigits);\n\n  /// Returns this - [subtration]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator -(Fixed subtration) {\n    final targetDecimalDigits = max(decimalDigits, subtration.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledSubtraction = _rescale(subtration.minorUnits,\n        existingDecimalDigits: subtration.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis - scaledSubtraction,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this / [denominator]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator /(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final numResult = numerator / scaledDenominator;\n\n    return Fixed.fromNum(numResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns  this / [divisor].\n  ///\n  /// The decimalDigits is left unchanged.\n  Fixed divide(num divisor) => this * Fixed.fromNum(1.0 / divisor.toDouble());\n\n  /// Returns the this ~/ [denominator]\n  ///\n  /// This is a truncating division operator.\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator ~/(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator ~/ scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// less than operator\n  bool operator <(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits < scaled.two.minorUnits;\n  }\n\n  /// less than or equal operator\n  bool operator <=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits <= scaled.two.minorUnits;\n  }\n\n  /// Two Fixed values are considered equal if they have\n  /// the same value irrespective of decimalDigits.\n  @override\n  bool operator ==(Object other) {\n    if (other is! Fixed) {\n      return false;\n    }\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits == scaled.two.minorUnits;\n  }\n\n  /// greater than operator\n  bool operator >(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits > scaled.two.minorUnits;\n  }\n\n  /// greater than or equal operator\n  bool operator >=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits >= scaled.two.minorUnits;\n  }\n\n  ///  Spread the value across 'n' Fixed values according\n  /// to the supplie [ratios].\n  ///\n  /// 'n' is controlled by the number\n  /// of [ratios] passed.\n  List<Fixed> allocationAccordingTo(List<int> ratios) {\n    if (ratios.isEmpty) {\n      throw ArgumentError.value(ratios, 'ratios',\n          'List of ratios must not be empty, cannot allocate to nothing.');\n    }\n\n    return _doAllocationAccordingTo(ratios.map((ratio) {\n      if (ratio < 0) {\n        throw ArgumentError.value(\n            ratios, 'ratios', 'Ratio must not be negative.');\n      }\n\n      return BigInt.from(ratio);\n    }).toList());\n  }\n\n  /// Two [Fixed] instances are the same if they have\n  /// the same [minorUnits] and the same [decimalDigits].\n  @override\n  int compareTo(Fixed other) {\n    if (minorUnits == other.minorUnits) {\n      return decimalDigits.compareTo(other.decimalDigits);\n    } else {\n      return minorUnits.compareTo(other.minorUnits);\n    }\n  }\n\n  /// Formats a [Fixed] value into a String according to the\n  /// passed [pattern].\n  ///\n  /// If [invertSeparator] is true then the role of the '.' and ',' are\n  /// reversed. By default the '.' is used as the decimal separator\n  /// whilst the ',' is used as the grouping separator.\n  ///\n  /// 0 A single digit\n  /// # A single digit, omitted if the value is zero\n  /// . or , Decimal separator dependant on [invertSeparator]\n  /// - Minus sign\n  /// , or . Grouping separator dependant on [invertSeparator]\n  /// space Space character.\n  ///\n  String format(String pattern, {bool invertSeparator = false}) {\n    if (!invertSeparator) {\n      return FixedEncoder(pattern).encode(this);\n    } else {\n      return FixedEncoder(pattern, decimalSeparator: ',', groupSeparator: '.')\n          .encode(this);\n    }\n  }\n\n  /// Formats the value using the [locale]'s decimal pattern.\n  ///\n  /// If you don't provide a [locale] then we use the systems\n  /// default locale.\n  String formatIntl([String? locale]) {\n    locale ??= Intl.defaultLocale;\n\n    final formatter = NumberFormat.decimalPattern(locale);\n    return DecimalFormatter(formatter).format(toDecimal());\n  }\n\n  /// Returns this * [multiplier]\n  ///\n  /// if you pass [decimalDigits] then it will be used\n  /// to determine the number of decimals to retain from [multiplier].\n  /// If you don't pass [decimalDigits] then this.decimalDigits\n  /// will be used.\n  ///\n  /// The result's [decimalDigits] == [decimalDigits] * 2.\n  Fixed multiply(num multiplier, {int? decimalDigits}) =>\n      this *\n      Fixed.fromNum(multiplier,\n          decimalDigits: decimalDigits ?? this.decimalDigits);\n\n  /// Returns this ^ [exponent]\n  ///\n  /// The returned value has the same [decimalDigits] as this.\n  Fixed pow(int exponent) =>\n      Fixed.fromBigInt(minorUnits.pow(exponent), decimalDigits: decimalDigits);\n\n  /// Returns the remainder of dividing this / [divisor].\n  ///\n  /// The [decimalDigits] is largest of the two decimalDigits\n  /// + the decimalDigits of the [divisor].\n  Fixed remainder(Fixed divisor) => this - (this ~/ divisor) * divisor;\n\n  /// Returns the value as a [Decimal]\n  Decimal toDecimal() => Decimal.parse(toString());\n\n  /// Truncates this and returns the integer part.\n  int toInt() => minorUnits == BigInt.zero\n      ? 0\n      : (minorUnits ~/ BigInt.from(10).pow(decimalDigits)).toInt();\n\n  /// Returns the [Fixed] value using [decimalDigits] to control the\n  /// displayed number of decimal places.\n  ///\n  /// ```dart\n  /// Fixed.fromInt(1000, decimalDigits: 3).toString() == '1.000'\n  /// ```\n  ///\n  /// If you need to modify the separators or\n  /// control the returned decimalDigits use [format].\n  @override\n  String toString() {\n    final String pattern;\n    if (decimalDigits == 0) {\n      pattern = '#';\n    } else {\n      pattern = '0.${'#' * decimalDigits}';\n    }\n    final encoder = FixedEncoder(pattern);\n\n    return encoder.encode(this);\n  }\n\n  List<Fixed> _doAllocationAccordingTo(List<BigInt> ratios) {\n    final totalVolume = ratios.reduce((a, b) => a + b);\n\n    if (totalVolume == BigInt.zero) {\n      throw ArgumentError('Sum of ratios must be greater than zero, '\n          'cannot allocate to nothing.');\n    }\n\n    final absoluteValue = minorUnits.abs();\n    var remainder = absoluteValue;\n\n    final shares = ratios.map((ratio) {\n      final share = absoluteValue * ratio ~/ totalVolume;\n      remainder -= share;\n\n      return share;\n    }).toList();\n\n    for (var i = 0; remainder > BigInt.zero && i < shares.length; ++i) {\n      if (ratios[i] > BigInt.zero) {\n        shares[i] += BigInt.one;\n        remainder -= BigInt.one;\n      }\n    }\n\n    return shares\n        .map((share) => Fixed.fromBigInt(minorUnits.isNegative ? -share : share,\n            decimalDigits: decimalDigits))\n        .toList();\n  }\n\n  /// Works the same as [Fixed.parse] but returns a null\n  /// if the [amount] cannot be parsed.\n  ///\n  /// Sets the [decimalDigits] of the returned number to [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  static Fixed? tryParse(\n    String amount, {\n    int decimalDigits = 2,\n    bool invertSeparator = false,\n  }) {\n    try {\n      return Fixed.parse(amount,\n          //pattern: pattern,\n          decimalDigits: decimalDigits,\n          invertSeparator: invertSeparator);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  static void _checkDecimalDigits(int decimalDigits) {\n    if (decimalDigits < 0) {\n      throw FixedException(\n          'A negative decimalDigits of $decimalDigits was passed. '\n          'The decimalDigits must be >= 0.');\n    }\n  }\n\n  static BigInt _rescale(\n    BigInt minorUnits, {\n    required int existingDecimalDigits,\n    required int targetDecimalDigits,\n  }) {\n    if (existingDecimalDigits < targetDecimalDigits) {\n      // Increase decimalDigits:\n      //  just multiply by 10^(targetDecimalDigits - existingDecimalDigits)\n      final diff = targetDecimalDigits - existingDecimalDigits;\n      return minorUnits * BigInt.from(10).pow(diff);\n    } else if (existingDecimalDigits > targetDecimalDigits) {\n      // Reduce decimalDigits with round-half-away-from-zero\n      final diff = existingDecimalDigits - targetDecimalDigits;\n      return _roundHalfAwayFromZero(minorUnits, diff);\n    } else {\n      // No change\n      return minorUnits;\n    }\n  }\n\n  /// Divides [value] by 10^[decimalDigitsDiff], then rounds half\n  ///   away from zero.\n  /// Example: If [value] = 15241578750190521000000, decimalDigitsDiff = 6,\n  ///   we want to do integer division plus correct\n  ///   rounding—without floating-point.\n  static BigInt _roundHalfAwayFromZero(BigInt value, int decimalDigitsDiff) {\n    final divisor = BigInt.from(10).pow(decimalDigitsDiff);\n    if (divisor == BigInt.one) {\n      // Nothing to scale\n      return value;\n    }\n\n    // Determine sign; work with absolute\n    final isNegative = value.isNegative;\n    final absValue = isNegative ? -value : value;\n\n    // Integer division and remainder\n    final absQuotient = absValue ~/ divisor;\n    final absRemainder = absValue % divisor; // remainder in [0 .. divisor-1]\n\n    // Compare remainder to half of divisor\n    // If remainder * 2 == divisor => exactly half => also round up\n    final twiceRemainder = absRemainder << 1; // same as absRemainder * 2\n\n    if (twiceRemainder > divisor) {\n      // remainder > 0.5 => round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    } else if (twiceRemainder < divisor) {\n      // remainder < 0.5 => round down\n      return isNegative ? -absQuotient : absQuotient;\n    } else {\n      // remainder == exactly 0.5 => round half AWAY from zero => also round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    }\n  }\n\n  _Scaled2 _scale(Fixed fixed, Fixed other) {\n    if (fixed.decimalDigits > other.decimalDigits) {\n      return _Scaled2(\n          fixed,\n          Fixed.fromBigInt(\n              _rescale(other.minorUnits,\n                  existingDecimalDigits: other.decimalDigits,\n                  targetDecimalDigits: fixed.decimalDigits),\n              decimalDigits: fixed.decimalDigits));\n    }\n    if (fixed.decimalDigits < other.decimalDigits) {\n      return _Scaled2(\n          Fixed.fromBigInt(\n              _rescale(fixed.minorUnits,\n                  existingDecimalDigits: fixed.decimalDigits,\n                  targetDecimalDigits: other.decimalDigits),\n              decimalDigits: other.decimalDigits),\n          other);\n    }\n    return _Scaled2(fixed, other);\n  }"}
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-04T09:05:48.589699 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-04T09:05:48.589699
[ReorderMembersFix] 2025-10-04T09:05:48.879667 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/fixed/lib/src/fixed.dart:
[ReorderMembersFix] 2025-10-04T09:05:48.879667 ConflictingEditException: {"offset":23097,"length":57,"replacement":"  Fixed one;\n\n  Fixed two;\n\n  _Scaled2(this.one, this.two);"} conflicts with {"offset":23097,"length":57,"replacement":"  Fixed one;\n\n  Fixed two;\n\n  _Scaled2(this.one, this.two);"}
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-04T09:05:48.879667 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-04T09:05:48.879667
[ReorderMembersFix] 2025-10-04T09:05:48.882356 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/fixed/lib/src/fixed.dart:
[ReorderMembersFix] 2025-10-04T09:05:48.882356 ConflictingEditException: {"offset":938,"length":22138,"replacement":"  static const int maxInt = platform_consts.maxInt;\n\n  static const int minInt = platform_consts.minInt;\n\n  // The value zero with [decimalDigits] = 0\n  static final zero = Fixed.fromNum(0, decimalDigits: 0);\n\n  /// The value 1 with [decimalDigits] =0\n  static final one = Fixed.fromNum(1, decimalDigits: 0);\n\n  /// The value 2 with [decimalDigits] = 0\n  static final two = Fixed.fromNum(2, decimalDigits: 0);\n\n  /// The value 10 with [decimalDigits] = 0\n  static final ten = Fixed.fromNum(10, decimalDigits: 0);\n\n  /// The value of this [Fixed] instance stored as minorUnits in a [BigInt].\n  /// If the decimalDigits is 2 then 1 is stored as 100\n  /// If the decimalDigits is 3 then 1 is stored as 1000.\n  late final BigInt minorUnits;\n\n  /// Returns this as minor units.\n  ///\n  /// e.g.\n  /// ```dart\n  /// Fixed.fromNum(1.234, decimalDigits: 3).minorUnits = 1234\n  ///\n  /// late final BigInt minorUnits =\n  ///    (value * Decimal.ten.pow(decimalDigits)).toBigInt();\n  /// ```\n  ///\n  /// The decimalDigits with which we store the amount.\n  ///\n  /// A decimalDigits of 2 means we store the value to\n  /// two decimal places.\n  final int decimalDigits;\n\n  /// Parses [amount] as a decimal value.\n  ///\n  /// The [decimalDigits] controls the number of decimal\n  /// places to be retained.\n  /// If [decimalDigits] is not passed then the decimalDigits is determined\n  /// by the number of decimal places present in the passed [amount].\n  ///\n  /// If [decimalDigits] < 0 then a FixedException will be thrown.\n  /// If the [amount] isn't valid then\n  /// a [FixedParseException] is thrown.\n  ///\n  /// If [invertSeparator] = false then we\n  /// assume '.' is the decimal place and ',' is the group separator.\n  ///\n  /// If [invertSeparator] = true then we\n  /// assume ',' is the decimal place and '.' is the group separator.\n  factory Fixed.parse(\n    String amount, {\n    int? decimalDigits,\n    bool invertSeparator = false,\n  }) {\n    if (decimalDigits != null) {\n      _checkDecimalDigits(decimalDigits);\n    }\n\n    final decimalSeparator = invertSeparator ? ',' : '.';\n\n    final decoder = FixedDecoder(\n      // TODO(bsutton): remove the pattern from the decoder\n      // as I don't think we actually need one.\n      // We just need to know what char is the decimal place.\n      pattern: '#$decimalSeparator#',\n      groupSeparator: invertSeparator ? '.' : ',',\n      decimalSeparator: invertSeparator ? ',' : '.',\n    );\n    final minorUnitsAndScale = decoder.decode(amount, decimalDigits);\n    final targetDecimalDigits =\n        decimalDigits ?? minorUnitsAndScale.decimalDigits;\n    return Fixed.fromBigInt(\n        _rescale(minorUnitsAndScale.value,\n            existingDecimalDigits: minorUnitsAndScale.decimalDigits,\n            targetDecimalDigits: targetDecimalDigits),\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Creates a Fixed value from a double\n  /// or integer value and stores the value with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  ///\n  /// This method will throw [AmountTooLargeException]\n  /// if the [decimalDigits] is > 20 or the absolute value\n  /// is greater than 10^21\n  ///\n  /// If you need larger numbers then use one of the alternate\n  /// constructors.\n  Fixed.fromNum(num amount, {this.decimalDigits = 16}) {\n    ///\n    /// ```dart\n    /// final value = Fixed.fromNum(1.2345, decimalDigits: 2);\n    /// print(value) -> 1.23\n    /// ```\n    ///\n    _checkDecimalDigits(decimalDigits);\n\n    if (decimalDigits > 20) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n\n    final decoder = FixedDecoder(\n      pattern: '#.#',\n      groupSeparator: ',',\n      decimalSeparator: '.',\n    );\n\n    /// toStringAsFixed is limited to a max of 20 decimal places\n    try {\n      final fixed = amount.toStringAsFixed(decimalDigits);\n      if (fixed.contains('e')) {\n        throw AmountTooLargeException('The amount must be less than 10^20');\n      }\n      final decimalAndScale = decoder.decode(fixed, decimalDigits);\n      minorUnits = decimalAndScale.value;\n      // We catch the error so we can provide a more meaningful message.\n      // ignore: avoid_catching_errors\n    } on RangeError catch (_) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n  }\n\n  /// Creates Fixed instance from [minorUnits] with the given\n  /// [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  ///\n  /// e.g.\n  /// ```dart\n  /// final fixed = Fixed.fromInt(100, decimalDigits: 2)\n  /// print(fixed) : 1.00\n  /// ```\n  Fixed.fromInt(int minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n    this.minorUnits = BigInt.from(minorUnits);\n  }\n\n  /// Creates a Fixed instance from [amount] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  Fixed.fromDecimal(Decimal amount, {this.decimalDigits = 16}) {\n    _checkDecimalDigits(decimalDigits);\n    minorUnits = _rescale(\n      (amount * Decimal.ten.pow(amount.scale).toDecimal()).toBigInt(),\n      existingDecimalDigits: amount.scale,\n      targetDecimalDigits: decimalDigits,\n    );\n  }\n\n  /// Creates a Fixed instance from [minorUnits] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  Fixed.fromBigInt(this.minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the decimalDigits to [decimalDigits].\n  @Deprecated('Use the copyWith member method')\n  factory Fixed.copyWith(Fixed fixed, {int? decimalDigits}) {\n    decimalDigits ??= fixed.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(fixed.minorUnits,\n            existingDecimalDigits: fixed.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the scale to [decimalDigits].\n  Fixed copyWith({int? decimalDigits}) {\n    decimalDigits ??= this.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(minorUnits,\n            existingDecimalDigits: this.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns the absolute value of this.\n  Fixed get abs => isNegative ? -this : this;\n\n  /// The component of the number after the decimal point.\n  ///\n  /// The returned value will always be a +ve no.\n  /// The [integerPart] will contain the sign.\n  BigInt get decimalPart => (minorUnits - integerPart * scaleFactor).abs();\n\n  String decimalPartAsString() {\n    var whole = minorUnits.toString();\n\n    /// we will add the -ve when we know where it is to be placed.\n    if (whole.startsWith('-')) {\n      whole = whole.substring(1);\n    }\n\n    if (whole.length < decimalDigits) {\n      whole = whole.padLeft(decimalDigits, '0');\n    }\n\n    final decimalStart = whole.length - decimalDigits;\n    final decimalPart = whole.substring(decimalStart);\n\n    return decimalPart;\n  }\n\n  @override\n  int get hashCode => minorUnits.hashCode + decimalDigits.hashCode;\n\n  /// The component of the number before the decimal point\n  BigInt get integerPart => minorUnits ~/ BigInt.from(10).pow(decimalDigits);\n\n  /// returns true of the value of this is negative.\n  bool get isNegative => minorUnits < BigInt.zero;\n\n  /// returns true if the value of this is positive.\n  bool get isPositive => minorUnits > BigInt.zero;\n\n  /// returns true if the value of this is zero.\n  bool get isZero => minorUnits == BigInt.zero;\n\n  /// Returns 10 ^ [decimalDigits]\n  BigInt get scaleFactor => BigInt.from(10).pow(decimalDigits);\n\n  /// Returns the sign of this amount.\n  ///\n  /// Returns 0 for zero, -1 for values less than zero and +1 for\n  ///  values greater than zero.\n  int get sign => minorUnits.isNegative\n      ? -1\n      : minorUnits == BigInt.zero\n          ? 0\n          : 1;\n\n  /// Returns this % [denominator].\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator %(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator % scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this * [multiplier].\n  ///\n  /// The result's [decimalDigits] is the sum of the [decimalDigits] of the two\n  /// operands.\n  Fixed operator *(Fixed multiplier) {\n    final targetDecimalDigits = decimalDigits + multiplier.decimalDigits;\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledMultiplier = _rescale(multiplier.minorUnits,\n        existingDecimalDigits: multiplier.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final rawResult = scaledThis * scaledMultiplier;\n\n    final scaledResult = _rescale(rawResult,\n        existingDecimalDigits: targetDecimalDigits * 2,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this + [addition]\n  ///\n  /// The resulting [decimalDigits] is the larger decimalDigits of\n  /// the two operands.\n  Fixed operator +(Fixed addition) {\n    final targetDecimalDigits = max(decimalDigits, addition.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledAddition = _rescale(addition.minorUnits,\n        existingDecimalDigits: addition.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis + scaledAddition,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns -this.\n  ///\n  /// The resulting [decimalDigits] is the [decimalDigits] of this.\n  Fixed operator -() =>\n      Fixed.fromBigInt(-minorUnits, decimalDigits: decimalDigits);\n\n  /// Returns this - [subtration]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator -(Fixed subtration) {\n    final targetDecimalDigits = max(decimalDigits, subtration.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledSubtraction = _rescale(subtration.minorUnits,\n        existingDecimalDigits: subtration.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis - scaledSubtraction,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this / [denominator]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator /(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final numResult = numerator / scaledDenominator;\n\n    return Fixed.fromNum(numResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns  this / [divisor].\n  ///\n  /// The decimalDigits is left unchanged.\n  Fixed divide(num divisor) => this * Fixed.fromNum(1.0 / divisor.toDouble());\n\n  /// Returns the this ~/ [denominator]\n  ///\n  /// This is a truncating division operator.\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator ~/(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator ~/ scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// less than operator\n  bool operator <(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits < scaled.two.minorUnits;\n  }\n\n  /// less than or equal operator\n  bool operator <=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits <= scaled.two.minorUnits;\n  }\n\n  /// Two Fixed values are considered equal if they have\n  /// the same value irrespective of decimalDigits.\n  @override\n  bool operator ==(Object other) {\n    if (other is! Fixed) {\n      return false;\n    }\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits == scaled.two.minorUnits;\n  }\n\n  /// greater than operator\n  bool operator >(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits > scaled.two.minorUnits;\n  }\n\n  /// greater than or equal operator\n  bool operator >=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits >= scaled.two.minorUnits;\n  }\n\n  ///  Spread the value across 'n' Fixed values according\n  /// to the supplie [ratios].\n  ///\n  /// 'n' is controlled by the number\n  /// of [ratios] passed.\n  List<Fixed> allocationAccordingTo(List<int> ratios) {\n    if (ratios.isEmpty) {\n      throw ArgumentError.value(ratios, 'ratios',\n          'List of ratios must not be empty, cannot allocate to nothing.');\n    }\n\n    return _doAllocationAccordingTo(ratios.map((ratio) {\n      if (ratio < 0) {\n        throw ArgumentError.value(\n            ratios, 'ratios', 'Ratio must not be negative.');\n      }\n\n      return BigInt.from(ratio);\n    }).toList());\n  }\n\n  /// Two [Fixed] instances are the same if they have\n  /// the same [minorUnits] and the same [decimalDigits].\n  @override\n  int compareTo(Fixed other) {\n    if (minorUnits == other.minorUnits) {\n      return decimalDigits.compareTo(other.decimalDigits);\n    } else {\n      return minorUnits.compareTo(other.minorUnits);\n    }\n  }\n\n  /// Formats a [Fixed] value into a String according to the\n  /// passed [pattern].\n  ///\n  /// If [invertSeparator] is true then the role of the '.' and ',' are\n  /// reversed. By default the '.' is used as the decimal separator\n  /// whilst the ',' is used as the grouping separator.\n  ///\n  /// 0 A single digit\n  /// # A single digit, omitted if the value is zero\n  /// . or , Decimal separator dependant on [invertSeparator]\n  /// - Minus sign\n  /// , or . Grouping separator dependant on [invertSeparator]\n  /// space Space character.\n  ///\n  String format(String pattern, {bool invertSeparator = false}) {\n    if (!invertSeparator) {\n      return FixedEncoder(pattern).encode(this);\n    } else {\n      return FixedEncoder(pattern, decimalSeparator: ',', groupSeparator: '.')\n          .encode(this);\n    }\n  }\n\n  /// Formats the value using the [locale]'s decimal pattern.\n  ///\n  /// If you don't provide a [locale] then we use the systems\n  /// default locale.\n  String formatIntl([String? locale]) {\n    locale ??= Intl.defaultLocale;\n\n    final formatter = NumberFormat.decimalPattern(locale);\n    return DecimalFormatter(formatter).format(toDecimal());\n  }\n\n  /// Returns this * [multiplier]\n  ///\n  /// if you pass [decimalDigits] then it will be used\n  /// to determine the number of decimals to retain from [multiplier].\n  /// If you don't pass [decimalDigits] then this.decimalDigits\n  /// will be used.\n  ///\n  /// The result's [decimalDigits] == [decimalDigits] * 2.\n  Fixed multiply(num multiplier, {int? decimalDigits}) =>\n      this *\n      Fixed.fromNum(multiplier,\n          decimalDigits: decimalDigits ?? this.decimalDigits);\n\n  /// Returns this ^ [exponent]\n  ///\n  /// The returned value has the same [decimalDigits] as this.\n  Fixed pow(int exponent) =>\n      Fixed.fromBigInt(minorUnits.pow(exponent), decimalDigits: decimalDigits);\n\n  /// Returns the remainder of dividing this / [divisor].\n  ///\n  /// The [decimalDigits] is largest of the two decimalDigits\n  /// + the decimalDigits of the [divisor].\n  Fixed remainder(Fixed divisor) => this - (this ~/ divisor) * divisor;\n\n  /// Returns the value as a [Decimal]\n  Decimal toDecimal() => Decimal.parse(toString());\n\n  /// Truncates this and returns the integer part.\n  int toInt() => minorUnits == BigInt.zero\n      ? 0\n      : (minorUnits ~/ BigInt.from(10).pow(decimalDigits)).toInt();\n\n  /// Returns the [Fixed] value using [decimalDigits] to control the\n  /// displayed number of decimal places.\n  ///\n  /// ```dart\n  /// Fixed.fromInt(1000, decimalDigits: 3).toString() == '1.000'\n  /// ```\n  ///\n  /// If you need to modify the separators or\n  /// control the returned decimalDigits use [format].\n  @override\n  String toString() {\n    final String pattern;\n    if (decimalDigits == 0) {\n      pattern = '#';\n    } else {\n      pattern = '0.${'#' * decimalDigits}';\n    }\n    final encoder = FixedEncoder(pattern);\n\n    return encoder.encode(this);\n  }\n\n  List<Fixed> _doAllocationAccordingTo(List<BigInt> ratios) {\n    final totalVolume = ratios.reduce((a, b) => a + b);\n\n    if (totalVolume == BigInt.zero) {\n      throw ArgumentError('Sum of ratios must be greater than zero, '\n          'cannot allocate to nothing.');\n    }\n\n    final absoluteValue = minorUnits.abs();\n    var remainder = absoluteValue;\n\n    final shares = ratios.map((ratio) {\n      final share = absoluteValue * ratio ~/ totalVolume;\n      remainder -= share;\n\n      return share;\n    }).toList();\n\n    for (var i = 0; remainder > BigInt.zero && i < shares.length; ++i) {\n      if (ratios[i] > BigInt.zero) {\n        shares[i] += BigInt.one;\n        remainder -= BigInt.one;\n      }\n    }\n\n    return shares\n        .map((share) => Fixed.fromBigInt(minorUnits.isNegative ? -share : share,\n            decimalDigits: decimalDigits))\n        .toList();\n  }\n\n  /// Works the same as [Fixed.parse] but returns a null\n  /// if the [amount] cannot be parsed.\n  ///\n  /// Sets the [decimalDigits] of the returned number to [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  static Fixed? tryParse(\n    String amount, {\n    int decimalDigits = 2,\n    bool invertSeparator = false,\n  }) {\n    try {\n      return Fixed.parse(amount,\n          //pattern: pattern,\n          decimalDigits: decimalDigits,\n          invertSeparator: invertSeparator);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  static void _checkDecimalDigits(int decimalDigits) {\n    if (decimalDigits < 0) {\n      throw FixedException(\n          'A negative decimalDigits of $decimalDigits was passed. '\n          'The decimalDigits must be >= 0.');\n    }\n  }\n\n  static BigInt _rescale(\n    BigInt minorUnits, {\n    required int existingDecimalDigits,\n    required int targetDecimalDigits,\n  }) {\n    if (existingDecimalDigits < targetDecimalDigits) {\n      // Increase decimalDigits:\n      //  just multiply by 10^(targetDecimalDigits - existingDecimalDigits)\n      final diff = targetDecimalDigits - existingDecimalDigits;\n      return minorUnits * BigInt.from(10).pow(diff);\n    } else if (existingDecimalDigits > targetDecimalDigits) {\n      // Reduce decimalDigits with round-half-away-from-zero\n      final diff = existingDecimalDigits - targetDecimalDigits;\n      return _roundHalfAwayFromZero(minorUnits, diff);\n    } else {\n      // No change\n      return minorUnits;\n    }\n  }\n\n  /// Divides [value] by 10^[decimalDigitsDiff], then rounds half\n  ///   away from zero.\n  /// Example: If [value] = 15241578750190521000000, decimalDigitsDiff = 6,\n  ///   we want to do integer division plus correct\n  ///   rounding—without floating-point.\n  static BigInt _roundHalfAwayFromZero(BigInt value, int decimalDigitsDiff) {\n    final divisor = BigInt.from(10).pow(decimalDigitsDiff);\n    if (divisor == BigInt.one) {\n      // Nothing to scale\n      return value;\n    }\n\n    // Determine sign; work with absolute\n    final isNegative = value.isNegative;\n    final absValue = isNegative ? -value : value;\n\n    // Integer division and remainder\n    final absQuotient = absValue ~/ divisor;\n    final absRemainder = absValue % divisor; // remainder in [0 .. divisor-1]\n\n    // Compare remainder to half of divisor\n    // If remainder * 2 == divisor => exactly half => also round up\n    final twiceRemainder = absRemainder << 1; // same as absRemainder * 2\n\n    if (twiceRemainder > divisor) {\n      // remainder > 0.5 => round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    } else if (twiceRemainder < divisor) {\n      // remainder < 0.5 => round down\n      return isNegative ? -absQuotient : absQuotient;\n    } else {\n      // remainder == exactly 0.5 => round half AWAY from zero => also round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    }\n  }\n\n  _Scaled2 _scale(Fixed fixed, Fixed other) {\n    if (fixed.decimalDigits > other.decimalDigits) {\n      return _Scaled2(\n          fixed,\n          Fixed.fromBigInt(\n              _rescale(other.minorUnits,\n                  existingDecimalDigits: other.decimalDigits,\n                  targetDecimalDigits: fixed.decimalDigits),\n              decimalDigits: fixed.decimalDigits));\n    }\n    if (fixed.decimalDigits < other.decimalDigits) {\n      return _Scaled2(\n          Fixed.fromBigInt(\n              _rescale(fixed.minorUnits,\n                  existingDecimalDigits: fixed.decimalDigits,\n                  targetDecimalDigits: other.decimalDigits),\n              decimalDigits: other.decimalDigits),\n          other);\n    }\n    return _Scaled2(fixed, other);\n  }"} conflicts with {"offset":938,"length":22138,"replacement":"  static const int maxInt = platform_consts.maxInt;\n\n  static const int minInt = platform_consts.minInt;\n\n  // The value zero with [decimalDigits] = 0\n  static final zero = Fixed.fromNum(0, decimalDigits: 0);\n\n  /// The value 1 with [decimalDigits] =0\n  static final one = Fixed.fromNum(1, decimalDigits: 0);\n\n  /// The value 2 with [decimalDigits] = 0\n  static final two = Fixed.fromNum(2, decimalDigits: 0);\n\n  /// The value 10 with [decimalDigits] = 0\n  static final ten = Fixed.fromNum(10, decimalDigits: 0);\n\n  /// The value of this [Fixed] instance stored as minorUnits in a [BigInt].\n  /// If the decimalDigits is 2 then 1 is stored as 100\n  /// If the decimalDigits is 3 then 1 is stored as 1000.\n  late final BigInt minorUnits;\n\n  /// Returns this as minor units.\n  ///\n  /// e.g.\n  /// ```dart\n  /// Fixed.fromNum(1.234, decimalDigits: 3).minorUnits = 1234\n  ///\n  /// late final BigInt minorUnits =\n  ///    (value * Decimal.ten.pow(decimalDigits)).toBigInt();\n  /// ```\n  ///\n  /// The decimalDigits with which we store the amount.\n  ///\n  /// A decimalDigits of 2 means we store the value to\n  /// two decimal places.\n  final int decimalDigits;\n\n  /// Parses [amount] as a decimal value.\n  ///\n  /// The [decimalDigits] controls the number of decimal\n  /// places to be retained.\n  /// If [decimalDigits] is not passed then the decimalDigits is determined\n  /// by the number of decimal places present in the passed [amount].\n  ///\n  /// If [decimalDigits] < 0 then a FixedException will be thrown.\n  /// If the [amount] isn't valid then\n  /// a [FixedParseException] is thrown.\n  ///\n  /// If [invertSeparator] = false then we\n  /// assume '.' is the decimal place and ',' is the group separator.\n  ///\n  /// If [invertSeparator] = true then we\n  /// assume ',' is the decimal place and '.' is the group separator.\n  factory Fixed.parse(\n    String amount, {\n    int? decimalDigits,\n    bool invertSeparator = false,\n  }) {\n    if (decimalDigits != null) {\n      _checkDecimalDigits(decimalDigits);\n    }\n\n    final decimalSeparator = invertSeparator ? ',' : '.';\n\n    final decoder = FixedDecoder(\n      // TODO(bsutton): remove the pattern from the decoder\n      // as I don't think we actually need one.\n      // We just need to know what char is the decimal place.\n      pattern: '#$decimalSeparator#',\n      groupSeparator: invertSeparator ? '.' : ',',\n      decimalSeparator: invertSeparator ? ',' : '.',\n    );\n    final minorUnitsAndScale = decoder.decode(amount, decimalDigits);\n    final targetDecimalDigits =\n        decimalDigits ?? minorUnitsAndScale.decimalDigits;\n    return Fixed.fromBigInt(\n        _rescale(minorUnitsAndScale.value,\n            existingDecimalDigits: minorUnitsAndScale.decimalDigits,\n            targetDecimalDigits: targetDecimalDigits),\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Creates a Fixed value from a double\n  /// or integer value and stores the value with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  ///\n  /// This method will throw [AmountTooLargeException]\n  /// if the [decimalDigits] is > 20 or the absolute value\n  /// is greater than 10^21\n  ///\n  /// If you need larger numbers then use one of the alternate\n  /// constructors.\n  Fixed.fromNum(num amount, {this.decimalDigits = 16}) {\n    ///\n    /// ```dart\n    /// final value = Fixed.fromNum(1.2345, decimalDigits: 2);\n    /// print(value) -> 1.23\n    /// ```\n    ///\n    _checkDecimalDigits(decimalDigits);\n\n    if (decimalDigits > 20) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n\n    final decoder = FixedDecoder(\n      pattern: '#.#',\n      groupSeparator: ',',\n      decimalSeparator: '.',\n    );\n\n    /// toStringAsFixed is limited to a max of 20 decimal places\n    try {\n      final fixed = amount.toStringAsFixed(decimalDigits);\n      if (fixed.contains('e')) {\n        throw AmountTooLargeException('The amount must be less than 10^20');\n      }\n      final decimalAndScale = decoder.decode(fixed, decimalDigits);\n      minorUnits = decimalAndScale.value;\n      // We catch the error so we can provide a more meaningful message.\n      // ignore: avoid_catching_errors\n    } on RangeError catch (_) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n  }\n\n  /// Creates Fixed instance from [minorUnits] with the given\n  /// [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  ///\n  /// e.g.\n  /// ```dart\n  /// final fixed = Fixed.fromInt(100, decimalDigits: 2)\n  /// print(fixed) : 1.00\n  /// ```\n  Fixed.fromInt(int minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n    this.minorUnits = BigInt.from(minorUnits);\n  }\n\n  /// Creates a Fixed instance from [amount] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  Fixed.fromDecimal(Decimal amount, {this.decimalDigits = 16}) {\n    _checkDecimalDigits(decimalDigits);\n    minorUnits = _rescale(\n      (amount * Decimal.ten.pow(amount.scale).toDecimal()).toBigInt(),\n      existingDecimalDigits: amount.scale,\n      targetDecimalDigits: decimalDigits,\n    );\n  }\n\n  /// Creates a Fixed instance from [minorUnits] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  Fixed.fromBigInt(this.minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the decimalDigits to [decimalDigits].\n  @Deprecated('Use the copyWith member method')\n  factory Fixed.copyWith(Fixed fixed, {int? decimalDigits}) {\n    decimalDigits ??= fixed.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(fixed.minorUnits,\n            existingDecimalDigits: fixed.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the scale to [decimalDigits].\n  Fixed copyWith({int? decimalDigits}) {\n    decimalDigits ??= this.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(minorUnits,\n            existingDecimalDigits: this.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns the absolute value of this.\n  Fixed get abs => isNegative ? -this : this;\n\n  /// The component of the number after the decimal point.\n  ///\n  /// The returned value will always be a +ve no.\n  /// The [integerPart] will contain the sign.\n  BigInt get decimalPart => (minorUnits - integerPart * scaleFactor).abs();\n\n  String decimalPartAsString() {\n    var whole = minorUnits.toString();\n\n    /// we will add the -ve when we know where it is to be placed.\n    if (whole.startsWith('-')) {\n      whole = whole.substring(1);\n    }\n\n    if (whole.length < decimalDigits) {\n      whole = whole.padLeft(decimalDigits, '0');\n    }\n\n    final decimalStart = whole.length - decimalDigits;\n    final decimalPart = whole.substring(decimalStart);\n\n    return decimalPart;\n  }\n\n  @override\n  int get hashCode => minorUnits.hashCode + decimalDigits.hashCode;\n\n  /// The component of the number before the decimal point\n  BigInt get integerPart => minorUnits ~/ BigInt.from(10).pow(decimalDigits);\n\n  /// returns true of the value of this is negative.\n  bool get isNegative => minorUnits < BigInt.zero;\n\n  /// returns true if the value of this is positive.\n  bool get isPositive => minorUnits > BigInt.zero;\n\n  /// returns true if the value of this is zero.\n  bool get isZero => minorUnits == BigInt.zero;\n\n  /// Returns 10 ^ [decimalDigits]\n  BigInt get scaleFactor => BigInt.from(10).pow(decimalDigits);\n\n  /// Returns the sign of this amount.\n  ///\n  /// Returns 0 for zero, -1 for values less than zero and +1 for\n  ///  values greater than zero.\n  int get sign => minorUnits.isNegative\n      ? -1\n      : minorUnits == BigInt.zero\n          ? 0\n          : 1;\n\n  /// Returns this % [denominator].\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator %(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator % scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this * [multiplier].\n  ///\n  /// The result's [decimalDigits] is the sum of the [decimalDigits] of the two\n  /// operands.\n  Fixed operator *(Fixed multiplier) {\n    final targetDecimalDigits = decimalDigits + multiplier.decimalDigits;\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledMultiplier = _rescale(multiplier.minorUnits,\n        existingDecimalDigits: multiplier.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final rawResult = scaledThis * scaledMultiplier;\n\n    final scaledResult = _rescale(rawResult,\n        existingDecimalDigits: targetDecimalDigits * 2,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this + [addition]\n  ///\n  /// The resulting [decimalDigits] is the larger decimalDigits of\n  /// the two operands.\n  Fixed operator +(Fixed addition) {\n    final targetDecimalDigits = max(decimalDigits, addition.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledAddition = _rescale(addition.minorUnits,\n        existingDecimalDigits: addition.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis + scaledAddition,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns -this.\n  ///\n  /// The resulting [decimalDigits] is the [decimalDigits] of this.\n  Fixed operator -() =>\n      Fixed.fromBigInt(-minorUnits, decimalDigits: decimalDigits);\n\n  /// Returns this - [subtration]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator -(Fixed subtration) {\n    final targetDecimalDigits = max(decimalDigits, subtration.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledSubtraction = _rescale(subtration.minorUnits,\n        existingDecimalDigits: subtration.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis - scaledSubtraction,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this / [denominator]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator /(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final numResult = numerator / scaledDenominator;\n\n    return Fixed.fromNum(numResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns  this / [divisor].\n  ///\n  /// The decimalDigits is left unchanged.\n  Fixed divide(num divisor) => this * Fixed.fromNum(1.0 / divisor.toDouble());\n\n  /// Returns the this ~/ [denominator]\n  ///\n  /// This is a truncating division operator.\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator ~/(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator ~/ scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// less than operator\n  bool operator <(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits < scaled.two.minorUnits;\n  }\n\n  /// less than or equal operator\n  bool operator <=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits <= scaled.two.minorUnits;\n  }\n\n  /// Two Fixed values are considered equal if they have\n  /// the same value irrespective of decimalDigits.\n  @override\n  bool operator ==(Object other) {\n    if (other is! Fixed) {\n      return false;\n    }\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits == scaled.two.minorUnits;\n  }\n\n  /// greater than operator\n  bool operator >(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits > scaled.two.minorUnits;\n  }\n\n  /// greater than or equal operator\n  bool operator >=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits >= scaled.two.minorUnits;\n  }\n\n  ///  Spread the value across 'n' Fixed values according\n  /// to the supplie [ratios].\n  ///\n  /// 'n' is controlled by the number\n  /// of [ratios] passed.\n  List<Fixed> allocationAccordingTo(List<int> ratios) {\n    if (ratios.isEmpty) {\n      throw ArgumentError.value(ratios, 'ratios',\n          'List of ratios must not be empty, cannot allocate to nothing.');\n    }\n\n    return _doAllocationAccordingTo(ratios.map((ratio) {\n      if (ratio < 0) {\n        throw ArgumentError.value(\n            ratios, 'ratios', 'Ratio must not be negative.');\n      }\n\n      return BigInt.from(ratio);\n    }).toList());\n  }\n\n  /// Two [Fixed] instances are the same if they have\n  /// the same [minorUnits] and the same [decimalDigits].\n  @override\n  int compareTo(Fixed other) {\n    if (minorUnits == other.minorUnits) {\n      return decimalDigits.compareTo(other.decimalDigits);\n    } else {\n      return minorUnits.compareTo(other.minorUnits);\n    }\n  }\n\n  /// Formats a [Fixed] value into a String according to the\n  /// passed [pattern].\n  ///\n  /// If [invertSeparator] is true then the role of the '.' and ',' are\n  /// reversed. By default the '.' is used as the decimal separator\n  /// whilst the ',' is used as the grouping separator.\n  ///\n  /// 0 A single digit\n  /// # A single digit, omitted if the value is zero\n  /// . or , Decimal separator dependant on [invertSeparator]\n  /// - Minus sign\n  /// , or . Grouping separator dependant on [invertSeparator]\n  /// space Space character.\n  ///\n  String format(String pattern, {bool invertSeparator = false}) {\n    if (!invertSeparator) {\n      return FixedEncoder(pattern).encode(this);\n    } else {\n      return FixedEncoder(pattern, decimalSeparator: ',', groupSeparator: '.')\n          .encode(this);\n    }\n  }\n\n  /// Formats the value using the [locale]'s decimal pattern.\n  ///\n  /// If you don't provide a [locale] then we use the systems\n  /// default locale.\n  String formatIntl([String? locale]) {\n    locale ??= Intl.defaultLocale;\n\n    final formatter = NumberFormat.decimalPattern(locale);\n    return DecimalFormatter(formatter).format(toDecimal());\n  }\n\n  /// Returns this * [multiplier]\n  ///\n  /// if you pass [decimalDigits] then it will be used\n  /// to determine the number of decimals to retain from [multiplier].\n  /// If you don't pass [decimalDigits] then this.decimalDigits\n  /// will be used.\n  ///\n  /// The result's [decimalDigits] == [decimalDigits] * 2.\n  Fixed multiply(num multiplier, {int? decimalDigits}) =>\n      this *\n      Fixed.fromNum(multiplier,\n          decimalDigits: decimalDigits ?? this.decimalDigits);\n\n  /// Returns this ^ [exponent]\n  ///\n  /// The returned value has the same [decimalDigits] as this.\n  Fixed pow(int exponent) =>\n      Fixed.fromBigInt(minorUnits.pow(exponent), decimalDigits: decimalDigits);\n\n  /// Returns the remainder of dividing this / [divisor].\n  ///\n  /// The [decimalDigits] is largest of the two decimalDigits\n  /// + the decimalDigits of the [divisor].\n  Fixed remainder(Fixed divisor) => this - (this ~/ divisor) * divisor;\n\n  /// Returns the value as a [Decimal]\n  Decimal toDecimal() => Decimal.parse(toString());\n\n  /// Truncates this and returns the integer part.\n  int toInt() => minorUnits == BigInt.zero\n      ? 0\n      : (minorUnits ~/ BigInt.from(10).pow(decimalDigits)).toInt();\n\n  /// Returns the [Fixed] value using [decimalDigits] to control the\n  /// displayed number of decimal places.\n  ///\n  /// ```dart\n  /// Fixed.fromInt(1000, decimalDigits: 3).toString() == '1.000'\n  /// ```\n  ///\n  /// If you need to modify the separators or\n  /// control the returned decimalDigits use [format].\n  @override\n  String toString() {\n    final String pattern;\n    if (decimalDigits == 0) {\n      pattern = '#';\n    } else {\n      pattern = '0.${'#' * decimalDigits}';\n    }\n    final encoder = FixedEncoder(pattern);\n\n    return encoder.encode(this);\n  }\n\n  List<Fixed> _doAllocationAccordingTo(List<BigInt> ratios) {\n    final totalVolume = ratios.reduce((a, b) => a + b);\n\n    if (totalVolume == BigInt.zero) {\n      throw ArgumentError('Sum of ratios must be greater than zero, '\n          'cannot allocate to nothing.');\n    }\n\n    final absoluteValue = minorUnits.abs();\n    var remainder = absoluteValue;\n\n    final shares = ratios.map((ratio) {\n      final share = absoluteValue * ratio ~/ totalVolume;\n      remainder -= share;\n\n      return share;\n    }).toList();\n\n    for (var i = 0; remainder > BigInt.zero && i < shares.length; ++i) {\n      if (ratios[i] > BigInt.zero) {\n        shares[i] += BigInt.one;\n        remainder -= BigInt.one;\n      }\n    }\n\n    return shares\n        .map((share) => Fixed.fromBigInt(minorUnits.isNegative ? -share : share,\n            decimalDigits: decimalDigits))\n        .toList();\n  }\n\n  /// Works the same as [Fixed.parse] but returns a null\n  /// if the [amount] cannot be parsed.\n  ///\n  /// Sets the [decimalDigits] of the returned number to [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  static Fixed? tryParse(\n    String amount, {\n    int decimalDigits = 2,\n    bool invertSeparator = false,\n  }) {\n    try {\n      return Fixed.parse(amount,\n          //pattern: pattern,\n          decimalDigits: decimalDigits,\n          invertSeparator: invertSeparator);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  static void _checkDecimalDigits(int decimalDigits) {\n    if (decimalDigits < 0) {\n      throw FixedException(\n          'A negative decimalDigits of $decimalDigits was passed. '\n          'The decimalDigits must be >= 0.');\n    }\n  }\n\n  static BigInt _rescale(\n    BigInt minorUnits, {\n    required int existingDecimalDigits,\n    required int targetDecimalDigits,\n  }) {\n    if (existingDecimalDigits < targetDecimalDigits) {\n      // Increase decimalDigits:\n      //  just multiply by 10^(targetDecimalDigits - existingDecimalDigits)\n      final diff = targetDecimalDigits - existingDecimalDigits;\n      return minorUnits * BigInt.from(10).pow(diff);\n    } else if (existingDecimalDigits > targetDecimalDigits) {\n      // Reduce decimalDigits with round-half-away-from-zero\n      final diff = existingDecimalDigits - targetDecimalDigits;\n      return _roundHalfAwayFromZero(minorUnits, diff);\n    } else {\n      // No change\n      return minorUnits;\n    }\n  }\n\n  /// Divides [value] by 10^[decimalDigitsDiff], then rounds half\n  ///   away from zero.\n  /// Example: If [value] = 15241578750190521000000, decimalDigitsDiff = 6,\n  ///   we want to do integer division plus correct\n  ///   rounding—without floating-point.\n  static BigInt _roundHalfAwayFromZero(BigInt value, int decimalDigitsDiff) {\n    final divisor = BigInt.from(10).pow(decimalDigitsDiff);\n    if (divisor == BigInt.one) {\n      // Nothing to scale\n      return value;\n    }\n\n    // Determine sign; work with absolute\n    final isNegative = value.isNegative;\n    final absValue = isNegative ? -value : value;\n\n    // Integer division and remainder\n    final absQuotient = absValue ~/ divisor;\n    final absRemainder = absValue % divisor; // remainder in [0 .. divisor-1]\n\n    // Compare remainder to half of divisor\n    // If remainder * 2 == divisor => exactly half => also round up\n    final twiceRemainder = absRemainder << 1; // same as absRemainder * 2\n\n    if (twiceRemainder > divisor) {\n      // remainder > 0.5 => round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    } else if (twiceRemainder < divisor) {\n      // remainder < 0.5 => round down\n      return isNegative ? -absQuotient : absQuotient;\n    } else {\n      // remainder == exactly 0.5 => round half AWAY from zero => also round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    }\n  }\n\n  _Scaled2 _scale(Fixed fixed, Fixed other) {\n    if (fixed.decimalDigits > other.decimalDigits) {\n      return _Scaled2(\n          fixed,\n          Fixed.fromBigInt(\n              _rescale(other.minorUnits,\n                  existingDecimalDigits: other.decimalDigits,\n                  targetDecimalDigits: fixed.decimalDigits),\n              decimalDigits: fixed.decimalDigits));\n    }\n    if (fixed.decimalDigits < other.decimalDigits) {\n      return _Scaled2(\n          Fixed.fromBigInt(\n              _rescale(fixed.minorUnits,\n                  existingDecimalDigits: fixed.decimalDigits,\n                  targetDecimalDigits: other.decimalDigits),\n              decimalDigits: other.decimalDigits),\n          other);\n    }\n    return _Scaled2(fixed, other);\n  }"}
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-04T09:05:48.882356 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-04T09:05:48.882356
[ReorderMembersFix] 2025-10-04T09:05:49.995160 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/fixed/lib/src/fixed.dart:
[ReorderMembersFix] 2025-10-04T09:05:49.995160 ConflictingEditException: {"offset":23097,"length":57,"replacement":"  Fixed one;\n\n  Fixed two;\n\n  _Scaled2(this.one, this.two);"} conflicts with {"offset":23097,"length":57,"replacement":"  Fixed one;\n\n  Fixed two;\n\n  _Scaled2(this.one, this.two);"}
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-04T09:05:49.995160 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-04T09:05:49.995160
[ReorderMembersFix] 2025-10-04T09:05:49.998664 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/fixed/lib/src/fixed.dart:
[ReorderMembersFix] 2025-10-04T09:05:49.998664 ConflictingEditException: {"offset":938,"length":22138,"replacement":"  static const int maxInt = platform_consts.maxInt;\n\n  static const int minInt = platform_consts.minInt;\n\n  // The value zero with [decimalDigits] = 0\n  static final zero = Fixed.fromNum(0, decimalDigits: 0);\n\n  /// The value 1 with [decimalDigits] =0\n  static final one = Fixed.fromNum(1, decimalDigits: 0);\n\n  /// The value 2 with [decimalDigits] = 0\n  static final two = Fixed.fromNum(2, decimalDigits: 0);\n\n  /// The value 10 with [decimalDigits] = 0\n  static final ten = Fixed.fromNum(10, decimalDigits: 0);\n\n  /// The value of this [Fixed] instance stored as minorUnits in a [BigInt].\n  /// If the decimalDigits is 2 then 1 is stored as 100\n  /// If the decimalDigits is 3 then 1 is stored as 1000.\n  late final BigInt minorUnits;\n\n  /// Returns this as minor units.\n  ///\n  /// e.g.\n  /// ```dart\n  /// Fixed.fromNum(1.234, decimalDigits: 3).minorUnits = 1234\n  ///\n  /// late final BigInt minorUnits =\n  ///    (value * Decimal.ten.pow(decimalDigits)).toBigInt();\n  /// ```\n  ///\n  /// The decimalDigits with which we store the amount.\n  ///\n  /// A decimalDigits of 2 means we store the value to\n  /// two decimal places.\n  final int decimalDigits;\n\n  /// Parses [amount] as a decimal value.\n  ///\n  /// The [decimalDigits] controls the number of decimal\n  /// places to be retained.\n  /// If [decimalDigits] is not passed then the decimalDigits is determined\n  /// by the number of decimal places present in the passed [amount].\n  ///\n  /// If [decimalDigits] < 0 then a FixedException will be thrown.\n  /// If the [amount] isn't valid then\n  /// a [FixedParseException] is thrown.\n  ///\n  /// If [invertSeparator] = false then we\n  /// assume '.' is the decimal place and ',' is the group separator.\n  ///\n  /// If [invertSeparator] = true then we\n  /// assume ',' is the decimal place and '.' is the group separator.\n  factory Fixed.parse(\n    String amount, {\n    int? decimalDigits,\n    bool invertSeparator = false,\n  }) {\n    if (decimalDigits != null) {\n      _checkDecimalDigits(decimalDigits);\n    }\n\n    final decimalSeparator = invertSeparator ? ',' : '.';\n\n    final decoder = FixedDecoder(\n      // TODO(bsutton): remove the pattern from the decoder\n      // as I don't think we actually need one.\n      // We just need to know what char is the decimal place.\n      pattern: '#$decimalSeparator#',\n      groupSeparator: invertSeparator ? '.' : ',',\n      decimalSeparator: invertSeparator ? ',' : '.',\n    );\n    final minorUnitsAndScale = decoder.decode(amount, decimalDigits);\n    final targetDecimalDigits =\n        decimalDigits ?? minorUnitsAndScale.decimalDigits;\n    return Fixed.fromBigInt(\n        _rescale(minorUnitsAndScale.value,\n            existingDecimalDigits: minorUnitsAndScale.decimalDigits,\n            targetDecimalDigits: targetDecimalDigits),\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Creates a Fixed value from a double\n  /// or integer value and stores the value with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  ///\n  /// This method will throw [AmountTooLargeException]\n  /// if the [decimalDigits] is > 20 or the absolute value\n  /// is greater than 10^21\n  ///\n  /// If you need larger numbers then use one of the alternate\n  /// constructors.\n  Fixed.fromNum(num amount, {this.decimalDigits = 16}) {\n    ///\n    /// ```dart\n    /// final value = Fixed.fromNum(1.2345, decimalDigits: 2);\n    /// print(value) -> 1.23\n    /// ```\n    ///\n    _checkDecimalDigits(decimalDigits);\n\n    if (decimalDigits > 20) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n\n    final decoder = FixedDecoder(\n      pattern: '#.#',\n      groupSeparator: ',',\n      decimalSeparator: '.',\n    );\n\n    /// toStringAsFixed is limited to a max of 20 decimal places\n    try {\n      final fixed = amount.toStringAsFixed(decimalDigits);\n      if (fixed.contains('e')) {\n        throw AmountTooLargeException('The amount must be less than 10^20');\n      }\n      final decimalAndScale = decoder.decode(fixed, decimalDigits);\n      minorUnits = decimalAndScale.value;\n      // We catch the error so we can provide a more meaningful message.\n      // ignore: avoid_catching_errors\n    } on RangeError catch (_) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n  }\n\n  /// Creates Fixed instance from [minorUnits] with the given\n  /// [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  ///\n  /// e.g.\n  /// ```dart\n  /// final fixed = Fixed.fromInt(100, decimalDigits: 2)\n  /// print(fixed) : 1.00\n  /// ```\n  Fixed.fromInt(int minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n    this.minorUnits = BigInt.from(minorUnits);\n  }\n\n  /// Creates a Fixed instance from [amount] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  Fixed.fromDecimal(Decimal amount, {this.decimalDigits = 16}) {\n    _checkDecimalDigits(decimalDigits);\n    minorUnits = _rescale(\n      (amount * Decimal.ten.pow(amount.scale).toDecimal()).toBigInt(),\n      existingDecimalDigits: amount.scale,\n      targetDecimalDigits: decimalDigits,\n    );\n  }\n\n  /// Creates a Fixed instance from [minorUnits] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  Fixed.fromBigInt(this.minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the decimalDigits to [decimalDigits].\n  @Deprecated('Use the copyWith member method')\n  factory Fixed.copyWith(Fixed fixed, {int? decimalDigits}) {\n    decimalDigits ??= fixed.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(fixed.minorUnits,\n            existingDecimalDigits: fixed.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the scale to [decimalDigits].\n  Fixed copyWith({int? decimalDigits}) {\n    decimalDigits ??= this.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(minorUnits,\n            existingDecimalDigits: this.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns the absolute value of this.\n  Fixed get abs => isNegative ? -this : this;\n\n  /// The component of the number after the decimal point.\n  ///\n  /// The returned value will always be a +ve no.\n  /// The [integerPart] will contain the sign.\n  BigInt get decimalPart => (minorUnits - integerPart * scaleFactor).abs();\n\n  String decimalPartAsString() {\n    var whole = minorUnits.toString();\n\n    /// we will add the -ve when we know where it is to be placed.\n    if (whole.startsWith('-')) {\n      whole = whole.substring(1);\n    }\n\n    if (whole.length < decimalDigits) {\n      whole = whole.padLeft(decimalDigits, '0');\n    }\n\n    final decimalStart = whole.length - decimalDigits;\n    final decimalPart = whole.substring(decimalStart);\n\n    return decimalPart;\n  }\n\n  @override\n  int get hashCode => minorUnits.hashCode + decimalDigits.hashCode;\n\n  /// The component of the number before the decimal point\n  BigInt get integerPart => minorUnits ~/ BigInt.from(10).pow(decimalDigits);\n\n  /// returns true of the value of this is negative.\n  bool get isNegative => minorUnits < BigInt.zero;\n\n  /// returns true if the value of this is positive.\n  bool get isPositive => minorUnits > BigInt.zero;\n\n  /// returns true if the value of this is zero.\n  bool get isZero => minorUnits == BigInt.zero;\n\n  /// Returns 10 ^ [decimalDigits]\n  BigInt get scaleFactor => BigInt.from(10).pow(decimalDigits);\n\n  /// Returns the sign of this amount.\n  ///\n  /// Returns 0 for zero, -1 for values less than zero and +1 for\n  ///  values greater than zero.\n  int get sign => minorUnits.isNegative\n      ? -1\n      : minorUnits == BigInt.zero\n          ? 0\n          : 1;\n\n  /// Returns this % [denominator].\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator %(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator % scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this * [multiplier].\n  ///\n  /// The result's [decimalDigits] is the sum of the [decimalDigits] of the two\n  /// operands.\n  Fixed operator *(Fixed multiplier) {\n    final targetDecimalDigits = decimalDigits + multiplier.decimalDigits;\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledMultiplier = _rescale(multiplier.minorUnits,\n        existingDecimalDigits: multiplier.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final rawResult = scaledThis * scaledMultiplier;\n\n    final scaledResult = _rescale(rawResult,\n        existingDecimalDigits: targetDecimalDigits * 2,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this + [addition]\n  ///\n  /// The resulting [decimalDigits] is the larger decimalDigits of\n  /// the two operands.\n  Fixed operator +(Fixed addition) {\n    final targetDecimalDigits = max(decimalDigits, addition.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledAddition = _rescale(addition.minorUnits,\n        existingDecimalDigits: addition.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis + scaledAddition,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns -this.\n  ///\n  /// The resulting [decimalDigits] is the [decimalDigits] of this.\n  Fixed operator -() =>\n      Fixed.fromBigInt(-minorUnits, decimalDigits: decimalDigits);\n\n  /// Returns this - [subtration]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator -(Fixed subtration) {\n    final targetDecimalDigits = max(decimalDigits, subtration.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledSubtraction = _rescale(subtration.minorUnits,\n        existingDecimalDigits: subtration.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis - scaledSubtraction,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this / [denominator]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator /(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final numResult = numerator / scaledDenominator;\n\n    return Fixed.fromNum(numResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns  this / [divisor].\n  ///\n  /// The decimalDigits is left unchanged.\n  Fixed divide(num divisor) => this * Fixed.fromNum(1.0 / divisor.toDouble());\n\n  /// Returns the this ~/ [denominator]\n  ///\n  /// This is a truncating division operator.\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator ~/(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator ~/ scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// less than operator\n  bool operator <(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits < scaled.two.minorUnits;\n  }\n\n  /// less than or equal operator\n  bool operator <=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits <= scaled.two.minorUnits;\n  }\n\n  /// Two Fixed values are considered equal if they have\n  /// the same value irrespective of decimalDigits.\n  @override\n  bool operator ==(Object other) {\n    if (other is! Fixed) {\n      return false;\n    }\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits == scaled.two.minorUnits;\n  }\n\n  /// greater than operator\n  bool operator >(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits > scaled.two.minorUnits;\n  }\n\n  /// greater than or equal operator\n  bool operator >=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits >= scaled.two.minorUnits;\n  }\n\n  ///  Spread the value across 'n' Fixed values according\n  /// to the supplie [ratios].\n  ///\n  /// 'n' is controlled by the number\n  /// of [ratios] passed.\n  List<Fixed> allocationAccordingTo(List<int> ratios) {\n    if (ratios.isEmpty) {\n      throw ArgumentError.value(ratios, 'ratios',\n          'List of ratios must not be empty, cannot allocate to nothing.');\n    }\n\n    return _doAllocationAccordingTo(ratios.map((ratio) {\n      if (ratio < 0) {\n        throw ArgumentError.value(\n            ratios, 'ratios', 'Ratio must not be negative.');\n      }\n\n      return BigInt.from(ratio);\n    }).toList());\n  }\n\n  /// Two [Fixed] instances are the same if they have\n  /// the same [minorUnits] and the same [decimalDigits].\n  @override\n  int compareTo(Fixed other) {\n    if (minorUnits == other.minorUnits) {\n      return decimalDigits.compareTo(other.decimalDigits);\n    } else {\n      return minorUnits.compareTo(other.minorUnits);\n    }\n  }\n\n  /// Formats a [Fixed] value into a String according to the\n  /// passed [pattern].\n  ///\n  /// If [invertSeparator] is true then the role of the '.' and ',' are\n  /// reversed. By default the '.' is used as the decimal separator\n  /// whilst the ',' is used as the grouping separator.\n  ///\n  /// 0 A single digit\n  /// # A single digit, omitted if the value is zero\n  /// . or , Decimal separator dependant on [invertSeparator]\n  /// - Minus sign\n  /// , or . Grouping separator dependant on [invertSeparator]\n  /// space Space character.\n  ///\n  String format(String pattern, {bool invertSeparator = false}) {\n    if (!invertSeparator) {\n      return FixedEncoder(pattern).encode(this);\n    } else {\n      return FixedEncoder(pattern, decimalSeparator: ',', groupSeparator: '.')\n          .encode(this);\n    }\n  }\n\n  /// Formats the value using the [locale]'s decimal pattern.\n  ///\n  /// If you don't provide a [locale] then we use the systems\n  /// default locale.\n  String formatIntl([String? locale]) {\n    locale ??= Intl.defaultLocale;\n\n    final formatter = NumberFormat.decimalPattern(locale);\n    return DecimalFormatter(formatter).format(toDecimal());\n  }\n\n  /// Returns this * [multiplier]\n  ///\n  /// if you pass [decimalDigits] then it will be used\n  /// to determine the number of decimals to retain from [multiplier].\n  /// If you don't pass [decimalDigits] then this.decimalDigits\n  /// will be used.\n  ///\n  /// The result's [decimalDigits] == [decimalDigits] * 2.\n  Fixed multiply(num multiplier, {int? decimalDigits}) =>\n      this *\n      Fixed.fromNum(multiplier,\n          decimalDigits: decimalDigits ?? this.decimalDigits);\n\n  /// Returns this ^ [exponent]\n  ///\n  /// The returned value has the same [decimalDigits] as this.\n  Fixed pow(int exponent) =>\n      Fixed.fromBigInt(minorUnits.pow(exponent), decimalDigits: decimalDigits);\n\n  /// Returns the remainder of dividing this / [divisor].\n  ///\n  /// The [decimalDigits] is largest of the two decimalDigits\n  /// + the decimalDigits of the [divisor].\n  Fixed remainder(Fixed divisor) => this - (this ~/ divisor) * divisor;\n\n  /// Returns the value as a [Decimal]\n  Decimal toDecimal() => Decimal.parse(toString());\n\n  /// Truncates this and returns the integer part.\n  int toInt() => minorUnits == BigInt.zero\n      ? 0\n      : (minorUnits ~/ BigInt.from(10).pow(decimalDigits)).toInt();\n\n  /// Returns the [Fixed] value using [decimalDigits] to control the\n  /// displayed number of decimal places.\n  ///\n  /// ```dart\n  /// Fixed.fromInt(1000, decimalDigits: 3).toString() == '1.000'\n  /// ```\n  ///\n  /// If you need to modify the separators or\n  /// control the returned decimalDigits use [format].\n  @override\n  String toString() {\n    final String pattern;\n    if (decimalDigits == 0) {\n      pattern = '#';\n    } else {\n      pattern = '0.${'#' * decimalDigits}';\n    }\n    final encoder = FixedEncoder(pattern);\n\n    return encoder.encode(this);\n  }\n\n  List<Fixed> _doAllocationAccordingTo(List<BigInt> ratios) {\n    final totalVolume = ratios.reduce((a, b) => a + b);\n\n    if (totalVolume == BigInt.zero) {\n      throw ArgumentError('Sum of ratios must be greater than zero, '\n          'cannot allocate to nothing.');\n    }\n\n    final absoluteValue = minorUnits.abs();\n    var remainder = absoluteValue;\n\n    final shares = ratios.map((ratio) {\n      final share = absoluteValue * ratio ~/ totalVolume;\n      remainder -= share;\n\n      return share;\n    }).toList();\n\n    for (var i = 0; remainder > BigInt.zero && i < shares.length; ++i) {\n      if (ratios[i] > BigInt.zero) {\n        shares[i] += BigInt.one;\n        remainder -= BigInt.one;\n      }\n    }\n\n    return shares\n        .map((share) => Fixed.fromBigInt(minorUnits.isNegative ? -share : share,\n            decimalDigits: decimalDigits))\n        .toList();\n  }\n\n  /// Works the same as [Fixed.parse] but returns a null\n  /// if the [amount] cannot be parsed.\n  ///\n  /// Sets the [decimalDigits] of the returned number to [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  static Fixed? tryParse(\n    String amount, {\n    int decimalDigits = 2,\n    bool invertSeparator = false,\n  }) {\n    try {\n      return Fixed.parse(amount,\n          //pattern: pattern,\n          decimalDigits: decimalDigits,\n          invertSeparator: invertSeparator);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  static void _checkDecimalDigits(int decimalDigits) {\n    if (decimalDigits < 0) {\n      throw FixedException(\n          'A negative decimalDigits of $decimalDigits was passed. '\n          'The decimalDigits must be >= 0.');\n    }\n  }\n\n  static BigInt _rescale(\n    BigInt minorUnits, {\n    required int existingDecimalDigits,\n    required int targetDecimalDigits,\n  }) {\n    if (existingDecimalDigits < targetDecimalDigits) {\n      // Increase decimalDigits:\n      //  just multiply by 10^(targetDecimalDigits - existingDecimalDigits)\n      final diff = targetDecimalDigits - existingDecimalDigits;\n      return minorUnits * BigInt.from(10).pow(diff);\n    } else if (existingDecimalDigits > targetDecimalDigits) {\n      // Reduce decimalDigits with round-half-away-from-zero\n      final diff = existingDecimalDigits - targetDecimalDigits;\n      return _roundHalfAwayFromZero(minorUnits, diff);\n    } else {\n      // No change\n      return minorUnits;\n    }\n  }\n\n  /// Divides [value] by 10^[decimalDigitsDiff], then rounds half\n  ///   away from zero.\n  /// Example: If [value] = 15241578750190521000000, decimalDigitsDiff = 6,\n  ///   we want to do integer division plus correct\n  ///   rounding—without floating-point.\n  static BigInt _roundHalfAwayFromZero(BigInt value, int decimalDigitsDiff) {\n    final divisor = BigInt.from(10).pow(decimalDigitsDiff);\n    if (divisor == BigInt.one) {\n      // Nothing to scale\n      return value;\n    }\n\n    // Determine sign; work with absolute\n    final isNegative = value.isNegative;\n    final absValue = isNegative ? -value : value;\n\n    // Integer division and remainder\n    final absQuotient = absValue ~/ divisor;\n    final absRemainder = absValue % divisor; // remainder in [0 .. divisor-1]\n\n    // Compare remainder to half of divisor\n    // If remainder * 2 == divisor => exactly half => also round up\n    final twiceRemainder = absRemainder << 1; // same as absRemainder * 2\n\n    if (twiceRemainder > divisor) {\n      // remainder > 0.5 => round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    } else if (twiceRemainder < divisor) {\n      // remainder < 0.5 => round down\n      return isNegative ? -absQuotient : absQuotient;\n    } else {\n      // remainder == exactly 0.5 => round half AWAY from zero => also round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    }\n  }\n\n  _Scaled2 _scale(Fixed fixed, Fixed other) {\n    if (fixed.decimalDigits > other.decimalDigits) {\n      return _Scaled2(\n          fixed,\n          Fixed.fromBigInt(\n              _rescale(other.minorUnits,\n                  existingDecimalDigits: other.decimalDigits,\n                  targetDecimalDigits: fixed.decimalDigits),\n              decimalDigits: fixed.decimalDigits));\n    }\n    if (fixed.decimalDigits < other.decimalDigits) {\n      return _Scaled2(\n          Fixed.fromBigInt(\n              _rescale(fixed.minorUnits,\n                  existingDecimalDigits: fixed.decimalDigits,\n                  targetDecimalDigits: other.decimalDigits),\n              decimalDigits: other.decimalDigits),\n          other);\n    }\n    return _Scaled2(fixed, other);\n  }"} conflicts with {"offset":938,"length":22138,"replacement":"  static const int maxInt = platform_consts.maxInt;\n\n  static const int minInt = platform_consts.minInt;\n\n  // The value zero with [decimalDigits] = 0\n  static final zero = Fixed.fromNum(0, decimalDigits: 0);\n\n  /// The value 1 with [decimalDigits] =0\n  static final one = Fixed.fromNum(1, decimalDigits: 0);\n\n  /// The value 2 with [decimalDigits] = 0\n  static final two = Fixed.fromNum(2, decimalDigits: 0);\n\n  /// The value 10 with [decimalDigits] = 0\n  static final ten = Fixed.fromNum(10, decimalDigits: 0);\n\n  /// The value of this [Fixed] instance stored as minorUnits in a [BigInt].\n  /// If the decimalDigits is 2 then 1 is stored as 100\n  /// If the decimalDigits is 3 then 1 is stored as 1000.\n  late final BigInt minorUnits;\n\n  /// Returns this as minor units.\n  ///\n  /// e.g.\n  /// ```dart\n  /// Fixed.fromNum(1.234, decimalDigits: 3).minorUnits = 1234\n  ///\n  /// late final BigInt minorUnits =\n  ///    (value * Decimal.ten.pow(decimalDigits)).toBigInt();\n  /// ```\n  ///\n  /// The decimalDigits with which we store the amount.\n  ///\n  /// A decimalDigits of 2 means we store the value to\n  /// two decimal places.\n  final int decimalDigits;\n\n  /// Parses [amount] as a decimal value.\n  ///\n  /// The [decimalDigits] controls the number of decimal\n  /// places to be retained.\n  /// If [decimalDigits] is not passed then the decimalDigits is determined\n  /// by the number of decimal places present in the passed [amount].\n  ///\n  /// If [decimalDigits] < 0 then a FixedException will be thrown.\n  /// If the [amount] isn't valid then\n  /// a [FixedParseException] is thrown.\n  ///\n  /// If [invertSeparator] = false then we\n  /// assume '.' is the decimal place and ',' is the group separator.\n  ///\n  /// If [invertSeparator] = true then we\n  /// assume ',' is the decimal place and '.' is the group separator.\n  factory Fixed.parse(\n    String amount, {\n    int? decimalDigits,\n    bool invertSeparator = false,\n  }) {\n    if (decimalDigits != null) {\n      _checkDecimalDigits(decimalDigits);\n    }\n\n    final decimalSeparator = invertSeparator ? ',' : '.';\n\n    final decoder = FixedDecoder(\n      // TODO(bsutton): remove the pattern from the decoder\n      // as I don't think we actually need one.\n      // We just need to know what char is the decimal place.\n      pattern: '#$decimalSeparator#',\n      groupSeparator: invertSeparator ? '.' : ',',\n      decimalSeparator: invertSeparator ? ',' : '.',\n    );\n    final minorUnitsAndScale = decoder.decode(amount, decimalDigits);\n    final targetDecimalDigits =\n        decimalDigits ?? minorUnitsAndScale.decimalDigits;\n    return Fixed.fromBigInt(\n        _rescale(minorUnitsAndScale.value,\n            existingDecimalDigits: minorUnitsAndScale.decimalDigits,\n            targetDecimalDigits: targetDecimalDigits),\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Creates a Fixed value from a double\n  /// or integer value and stores the value with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  ///\n  /// This method will throw [AmountTooLargeException]\n  /// if the [decimalDigits] is > 20 or the absolute value\n  /// is greater than 10^21\n  ///\n  /// If you need larger numbers then use one of the alternate\n  /// constructors.\n  Fixed.fromNum(num amount, {this.decimalDigits = 16}) {\n    ///\n    /// ```dart\n    /// final value = Fixed.fromNum(1.2345, decimalDigits: 2);\n    /// print(value) -> 1.23\n    /// ```\n    ///\n    _checkDecimalDigits(decimalDigits);\n\n    if (decimalDigits > 20) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n\n    final decoder = FixedDecoder(\n      pattern: '#.#',\n      groupSeparator: ',',\n      decimalSeparator: '.',\n    );\n\n    /// toStringAsFixed is limited to a max of 20 decimal places\n    try {\n      final fixed = amount.toStringAsFixed(decimalDigits);\n      if (fixed.contains('e')) {\n        throw AmountTooLargeException('The amount must be less than 10^20');\n      }\n      final decimalAndScale = decoder.decode(fixed, decimalDigits);\n      minorUnits = decimalAndScale.value;\n      // We catch the error so we can provide a more meaningful message.\n      // ignore: avoid_catching_errors\n    } on RangeError catch (_) {\n      throw AmountTooLargeException(\n          'The maximum decimal digits for num is 20.');\n    }\n  }\n\n  /// Creates Fixed instance from [minorUnits] with the given\n  /// [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  ///\n  /// e.g.\n  /// ```dart\n  /// final fixed = Fixed.fromInt(100, decimalDigits: 2)\n  /// print(fixed) : 1.00\n  /// ```\n  Fixed.fromInt(int minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n    this.minorUnits = BigInt.from(minorUnits);\n  }\n\n  /// Creates a Fixed instance from [amount] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 16 if not passed.\n  Fixed.fromDecimal(Decimal amount, {this.decimalDigits = 16}) {\n    _checkDecimalDigits(decimalDigits);\n    minorUnits = _rescale(\n      (amount * Decimal.ten.pow(amount.scale).toDecimal()).toBigInt(),\n      existingDecimalDigits: amount.scale,\n      targetDecimalDigits: decimalDigits,\n    );\n  }\n\n  /// Creates a Fixed instance from [minorUnits] with\n  /// the given [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  Fixed.fromBigInt(this.minorUnits, {this.decimalDigits = 2}) {\n    _checkDecimalDigits(decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the decimalDigits to [decimalDigits].\n  @Deprecated('Use the copyWith member method')\n  factory Fixed.copyWith(Fixed fixed, {int? decimalDigits}) {\n    decimalDigits ??= fixed.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(fixed.minorUnits,\n            existingDecimalDigits: fixed.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns a new [Fixed] value from an existing one\n  /// changing the scale to [decimalDigits].\n  Fixed copyWith({int? decimalDigits}) {\n    decimalDigits ??= this.decimalDigits;\n    _checkDecimalDigits(decimalDigits);\n    return Fixed.fromBigInt(\n        _rescale(minorUnits,\n            existingDecimalDigits: this.decimalDigits,\n            targetDecimalDigits: decimalDigits),\n        decimalDigits: decimalDigits);\n  }\n\n  /// Returns the absolute value of this.\n  Fixed get abs => isNegative ? -this : this;\n\n  /// The component of the number after the decimal point.\n  ///\n  /// The returned value will always be a +ve no.\n  /// The [integerPart] will contain the sign.\n  BigInt get decimalPart => (minorUnits - integerPart * scaleFactor).abs();\n\n  String decimalPartAsString() {\n    var whole = minorUnits.toString();\n\n    /// we will add the -ve when we know where it is to be placed.\n    if (whole.startsWith('-')) {\n      whole = whole.substring(1);\n    }\n\n    if (whole.length < decimalDigits) {\n      whole = whole.padLeft(decimalDigits, '0');\n    }\n\n    final decimalStart = whole.length - decimalDigits;\n    final decimalPart = whole.substring(decimalStart);\n\n    return decimalPart;\n  }\n\n  @override\n  int get hashCode => minorUnits.hashCode + decimalDigits.hashCode;\n\n  /// The component of the number before the decimal point\n  BigInt get integerPart => minorUnits ~/ BigInt.from(10).pow(decimalDigits);\n\n  /// returns true of the value of this is negative.\n  bool get isNegative => minorUnits < BigInt.zero;\n\n  /// returns true if the value of this is positive.\n  bool get isPositive => minorUnits > BigInt.zero;\n\n  /// returns true if the value of this is zero.\n  bool get isZero => minorUnits == BigInt.zero;\n\n  /// Returns 10 ^ [decimalDigits]\n  BigInt get scaleFactor => BigInt.from(10).pow(decimalDigits);\n\n  /// Returns the sign of this amount.\n  ///\n  /// Returns 0 for zero, -1 for values less than zero and +1 for\n  ///  values greater than zero.\n  int get sign => minorUnits.isNegative\n      ? -1\n      : minorUnits == BigInt.zero\n          ? 0\n          : 1;\n\n  /// Returns this % [denominator].\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator %(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator % scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this * [multiplier].\n  ///\n  /// The result's [decimalDigits] is the sum of the [decimalDigits] of the two\n  /// operands.\n  Fixed operator *(Fixed multiplier) {\n    final targetDecimalDigits = decimalDigits + multiplier.decimalDigits;\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledMultiplier = _rescale(multiplier.minorUnits,\n        existingDecimalDigits: multiplier.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final rawResult = scaledThis * scaledMultiplier;\n\n    final scaledResult = _rescale(rawResult,\n        existingDecimalDigits: targetDecimalDigits * 2,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this + [addition]\n  ///\n  /// The resulting [decimalDigits] is the larger decimalDigits of\n  /// the two operands.\n  Fixed operator +(Fixed addition) {\n    final targetDecimalDigits = max(decimalDigits, addition.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledAddition = _rescale(addition.minorUnits,\n        existingDecimalDigits: addition.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis + scaledAddition,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns -this.\n  ///\n  /// The resulting [decimalDigits] is the [decimalDigits] of this.\n  Fixed operator -() =>\n      Fixed.fromBigInt(-minorUnits, decimalDigits: decimalDigits);\n\n  /// Returns this - [subtration]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator -(Fixed subtration) {\n    final targetDecimalDigits = max(decimalDigits, subtration.decimalDigits);\n\n    final scaledThis = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledSubtraction = _rescale(subtration.minorUnits,\n        existingDecimalDigits: subtration.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(scaledThis - scaledSubtraction,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns this / [denominator]\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator /(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    final numResult = numerator / scaledDenominator;\n\n    return Fixed.fromNum(numResult, decimalDigits: targetDecimalDigits);\n  }\n\n  /// Returns  this / [divisor].\n  ///\n  /// The decimalDigits is left unchanged.\n  Fixed divide(num divisor) => this * Fixed.fromNum(1.0 / divisor.toDouble());\n\n  /// Returns the this ~/ [denominator]\n  ///\n  /// This is a truncating division operator.\n  ///\n  /// The decimalDigits is the largest of the two [decimalDigits]s.\n  Fixed operator ~/(Fixed denominator) {\n    final targetDecimalDigits = max(decimalDigits, denominator.decimalDigits);\n\n    final numerator = _rescale(minorUnits,\n        existingDecimalDigits: decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n    final scaledDenominator = _rescale(denominator.minorUnits,\n        existingDecimalDigits: denominator.decimalDigits,\n        targetDecimalDigits: targetDecimalDigits);\n\n    return Fixed.fromBigInt(numerator ~/ scaledDenominator,\n        decimalDigits: targetDecimalDigits);\n  }\n\n  /// less than operator\n  bool operator <(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits < scaled.two.minorUnits;\n  }\n\n  /// less than or equal operator\n  bool operator <=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits <= scaled.two.minorUnits;\n  }\n\n  /// Two Fixed values are considered equal if they have\n  /// the same value irrespective of decimalDigits.\n  @override\n  bool operator ==(Object other) {\n    if (other is! Fixed) {\n      return false;\n    }\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits == scaled.two.minorUnits;\n  }\n\n  /// greater than operator\n  bool operator >(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits > scaled.two.minorUnits;\n  }\n\n  /// greater than or equal operator\n  bool operator >=(Fixed other) {\n    final scaled = _scale(this, other);\n    return scaled.one.minorUnits >= scaled.two.minorUnits;\n  }\n\n  ///  Spread the value across 'n' Fixed values according\n  /// to the supplie [ratios].\n  ///\n  /// 'n' is controlled by the number\n  /// of [ratios] passed.\n  List<Fixed> allocationAccordingTo(List<int> ratios) {\n    if (ratios.isEmpty) {\n      throw ArgumentError.value(ratios, 'ratios',\n          'List of ratios must not be empty, cannot allocate to nothing.');\n    }\n\n    return _doAllocationAccordingTo(ratios.map((ratio) {\n      if (ratio < 0) {\n        throw ArgumentError.value(\n            ratios, 'ratios', 'Ratio must not be negative.');\n      }\n\n      return BigInt.from(ratio);\n    }).toList());\n  }\n\n  /// Two [Fixed] instances are the same if they have\n  /// the same [minorUnits] and the same [decimalDigits].\n  @override\n  int compareTo(Fixed other) {\n    if (minorUnits == other.minorUnits) {\n      return decimalDigits.compareTo(other.decimalDigits);\n    } else {\n      return minorUnits.compareTo(other.minorUnits);\n    }\n  }\n\n  /// Formats a [Fixed] value into a String according to the\n  /// passed [pattern].\n  ///\n  /// If [invertSeparator] is true then the role of the '.' and ',' are\n  /// reversed. By default the '.' is used as the decimal separator\n  /// whilst the ',' is used as the grouping separator.\n  ///\n  /// 0 A single digit\n  /// # A single digit, omitted if the value is zero\n  /// . or , Decimal separator dependant on [invertSeparator]\n  /// - Minus sign\n  /// , or . Grouping separator dependant on [invertSeparator]\n  /// space Space character.\n  ///\n  String format(String pattern, {bool invertSeparator = false}) {\n    if (!invertSeparator) {\n      return FixedEncoder(pattern).encode(this);\n    } else {\n      return FixedEncoder(pattern, decimalSeparator: ',', groupSeparator: '.')\n          .encode(this);\n    }\n  }\n\n  /// Formats the value using the [locale]'s decimal pattern.\n  ///\n  /// If you don't provide a [locale] then we use the systems\n  /// default locale.\n  String formatIntl([String? locale]) {\n    locale ??= Intl.defaultLocale;\n\n    final formatter = NumberFormat.decimalPattern(locale);\n    return DecimalFormatter(formatter).format(toDecimal());\n  }\n\n  /// Returns this * [multiplier]\n  ///\n  /// if you pass [decimalDigits] then it will be used\n  /// to determine the number of decimals to retain from [multiplier].\n  /// If you don't pass [decimalDigits] then this.decimalDigits\n  /// will be used.\n  ///\n  /// The result's [decimalDigits] == [decimalDigits] * 2.\n  Fixed multiply(num multiplier, {int? decimalDigits}) =>\n      this *\n      Fixed.fromNum(multiplier,\n          decimalDigits: decimalDigits ?? this.decimalDigits);\n\n  /// Returns this ^ [exponent]\n  ///\n  /// The returned value has the same [decimalDigits] as this.\n  Fixed pow(int exponent) =>\n      Fixed.fromBigInt(minorUnits.pow(exponent), decimalDigits: decimalDigits);\n\n  /// Returns the remainder of dividing this / [divisor].\n  ///\n  /// The [decimalDigits] is largest of the two decimalDigits\n  /// + the decimalDigits of the [divisor].\n  Fixed remainder(Fixed divisor) => this - (this ~/ divisor) * divisor;\n\n  /// Returns the value as a [Decimal]\n  Decimal toDecimal() => Decimal.parse(toString());\n\n  /// Truncates this and returns the integer part.\n  int toInt() => minorUnits == BigInt.zero\n      ? 0\n      : (minorUnits ~/ BigInt.from(10).pow(decimalDigits)).toInt();\n\n  /// Returns the [Fixed] value using [decimalDigits] to control the\n  /// displayed number of decimal places.\n  ///\n  /// ```dart\n  /// Fixed.fromInt(1000, decimalDigits: 3).toString() == '1.000'\n  /// ```\n  ///\n  /// If you need to modify the separators or\n  /// control the returned decimalDigits use [format].\n  @override\n  String toString() {\n    final String pattern;\n    if (decimalDigits == 0) {\n      pattern = '#';\n    } else {\n      pattern = '0.${'#' * decimalDigits}';\n    }\n    final encoder = FixedEncoder(pattern);\n\n    return encoder.encode(this);\n  }\n\n  List<Fixed> _doAllocationAccordingTo(List<BigInt> ratios) {\n    final totalVolume = ratios.reduce((a, b) => a + b);\n\n    if (totalVolume == BigInt.zero) {\n      throw ArgumentError('Sum of ratios must be greater than zero, '\n          'cannot allocate to nothing.');\n    }\n\n    final absoluteValue = minorUnits.abs();\n    var remainder = absoluteValue;\n\n    final shares = ratios.map((ratio) {\n      final share = absoluteValue * ratio ~/ totalVolume;\n      remainder -= share;\n\n      return share;\n    }).toList();\n\n    for (var i = 0; remainder > BigInt.zero && i < shares.length; ++i) {\n      if (ratios[i] > BigInt.zero) {\n        shares[i] += BigInt.one;\n        remainder -= BigInt.one;\n      }\n    }\n\n    return shares\n        .map((share) => Fixed.fromBigInt(minorUnits.isNegative ? -share : share,\n            decimalDigits: decimalDigits))\n        .toList();\n  }\n\n  /// Works the same as [Fixed.parse] but returns a null\n  /// if the [amount] cannot be parsed.\n  ///\n  /// Sets the [decimalDigits] of the returned number to [decimalDigits].\n  ///\n  /// [decimalDigits] defaults to 2 if not passed.\n  static Fixed? tryParse(\n    String amount, {\n    int decimalDigits = 2,\n    bool invertSeparator = false,\n  }) {\n    try {\n      return Fixed.parse(amount,\n          //pattern: pattern,\n          decimalDigits: decimalDigits,\n          invertSeparator: invertSeparator);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  static void _checkDecimalDigits(int decimalDigits) {\n    if (decimalDigits < 0) {\n      throw FixedException(\n          'A negative decimalDigits of $decimalDigits was passed. '\n          'The decimalDigits must be >= 0.');\n    }\n  }\n\n  static BigInt _rescale(\n    BigInt minorUnits, {\n    required int existingDecimalDigits,\n    required int targetDecimalDigits,\n  }) {\n    if (existingDecimalDigits < targetDecimalDigits) {\n      // Increase decimalDigits:\n      //  just multiply by 10^(targetDecimalDigits - existingDecimalDigits)\n      final diff = targetDecimalDigits - existingDecimalDigits;\n      return minorUnits * BigInt.from(10).pow(diff);\n    } else if (existingDecimalDigits > targetDecimalDigits) {\n      // Reduce decimalDigits with round-half-away-from-zero\n      final diff = existingDecimalDigits - targetDecimalDigits;\n      return _roundHalfAwayFromZero(minorUnits, diff);\n    } else {\n      // No change\n      return minorUnits;\n    }\n  }\n\n  /// Divides [value] by 10^[decimalDigitsDiff], then rounds half\n  ///   away from zero.\n  /// Example: If [value] = 15241578750190521000000, decimalDigitsDiff = 6,\n  ///   we want to do integer division plus correct\n  ///   rounding—without floating-point.\n  static BigInt _roundHalfAwayFromZero(BigInt value, int decimalDigitsDiff) {\n    final divisor = BigInt.from(10).pow(decimalDigitsDiff);\n    if (divisor == BigInt.one) {\n      // Nothing to scale\n      return value;\n    }\n\n    // Determine sign; work with absolute\n    final isNegative = value.isNegative;\n    final absValue = isNegative ? -value : value;\n\n    // Integer division and remainder\n    final absQuotient = absValue ~/ divisor;\n    final absRemainder = absValue % divisor; // remainder in [0 .. divisor-1]\n\n    // Compare remainder to half of divisor\n    // If remainder * 2 == divisor => exactly half => also round up\n    final twiceRemainder = absRemainder << 1; // same as absRemainder * 2\n\n    if (twiceRemainder > divisor) {\n      // remainder > 0.5 => round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    } else if (twiceRemainder < divisor) {\n      // remainder < 0.5 => round down\n      return isNegative ? -absQuotient : absQuotient;\n    } else {\n      // remainder == exactly 0.5 => round half AWAY from zero => also round up\n      return isNegative\n          ? -(absQuotient + BigInt.one)\n          : (absQuotient + BigInt.one);\n    }\n  }\n\n  _Scaled2 _scale(Fixed fixed, Fixed other) {\n    if (fixed.decimalDigits > other.decimalDigits) {\n      return _Scaled2(\n          fixed,\n          Fixed.fromBigInt(\n              _rescale(other.minorUnits,\n                  existingDecimalDigits: other.decimalDigits,\n                  targetDecimalDigits: fixed.decimalDigits),\n              decimalDigits: fixed.decimalDigits));\n    }\n    if (fixed.decimalDigits < other.decimalDigits) {\n      return _Scaled2(\n          Fixed.fromBigInt(\n              _rescale(fixed.minorUnits,\n                  existingDecimalDigits: fixed.decimalDigits,\n                  targetDecimalDigits: other.decimalDigits),\n              decimalDigits: other.decimalDigits),\n          other);\n    }\n    return _Scaled2(fixed, other);\n  }"}
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-04T09:05:49.998664 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-04T09:05:49.998664
